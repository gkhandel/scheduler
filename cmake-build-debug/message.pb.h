// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace specops {
namespace proto {
class Job;
class JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class Machine;
class MachineDefaultTypeInternal;
extern MachineDefaultTypeInternal _Machine_default_instance_;
class MaintenanceSchedule;
class MaintenanceScheduleDefaultTypeInternal;
extern MaintenanceScheduleDefaultTypeInternal _MaintenanceSchedule_default_instance_;
class ProcessStep;
class ProcessStepDefaultTypeInternal;
extern ProcessStepDefaultTypeInternal _ProcessStep_default_instance_;
class SchedulerMessage;
class SchedulerMessageDefaultTypeInternal;
extern SchedulerMessageDefaultTypeInternal _SchedulerMessage_default_instance_;
class SchedulingWindow;
class SchedulingWindowDefaultTypeInternal;
extern SchedulingWindowDefaultTypeInternal _SchedulingWindow_default_instance_;
class Tool;
class ToolDefaultTypeInternal;
extern ToolDefaultTypeInternal _Tool_default_instance_;
class TravelTime;
class TravelTimeDefaultTypeInternal;
extern TravelTimeDefaultTypeInternal _TravelTime_default_instance_;
}  // namespace proto
}  // namespace specops

namespace specops {
namespace proto {

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_2eproto

enum ProcessStep_Status {
  ProcessStep_Status_NOT_STARTED = 0,
  ProcessStep_Status_STARTED = 1,
  ProcessStep_Status_FINISHED = 2,
  ProcessStep_Status_ProcessStep_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProcessStep_Status_ProcessStep_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProcessStep_Status_IsValid(int value);
const ProcessStep_Status ProcessStep_Status_Status_MIN = ProcessStep_Status_NOT_STARTED;
const ProcessStep_Status ProcessStep_Status_Status_MAX = ProcessStep_Status_FINISHED;
const int ProcessStep_Status_Status_ARRAYSIZE = ProcessStep_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProcessStep_Status_descriptor();
inline const ::std::string& ProcessStep_Status_Name(ProcessStep_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProcessStep_Status_descriptor(), value);
}
inline bool ProcessStep_Status_Parse(
    const ::std::string& name, ProcessStep_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcessStep_Status>(
    ProcessStep_Status_descriptor(), name, value);
}
enum Machine_Status {
  Machine_Status_ONLINE = 0,
  Machine_Status_OFFLINE = 1,
  Machine_Status_Machine_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Machine_Status_Machine_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Machine_Status_IsValid(int value);
const Machine_Status Machine_Status_Status_MIN = Machine_Status_ONLINE;
const Machine_Status Machine_Status_Status_MAX = Machine_Status_OFFLINE;
const int Machine_Status_Status_ARRAYSIZE = Machine_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Machine_Status_descriptor();
inline const ::std::string& Machine_Status_Name(Machine_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Machine_Status_descriptor(), value);
}
inline bool Machine_Status_Parse(
    const ::std::string& name, Machine_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Machine_Status>(
    Machine_Status_descriptor(), name, value);
}
enum SchedulingWindow_DayOfWeek {
  SchedulingWindow_DayOfWeek_SUN = 0,
  SchedulingWindow_DayOfWeek_MON = 1,
  SchedulingWindow_DayOfWeek_TUE = 2,
  SchedulingWindow_DayOfWeek_WED = 3,
  SchedulingWindow_DayOfWeek_THU = 4,
  SchedulingWindow_DayOfWeek_FRI = 5,
  SchedulingWindow_DayOfWeek_SAT = 6,
  SchedulingWindow_DayOfWeek_SchedulingWindow_DayOfWeek_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SchedulingWindow_DayOfWeek_SchedulingWindow_DayOfWeek_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SchedulingWindow_DayOfWeek_IsValid(int value);
const SchedulingWindow_DayOfWeek SchedulingWindow_DayOfWeek_DayOfWeek_MIN = SchedulingWindow_DayOfWeek_SUN;
const SchedulingWindow_DayOfWeek SchedulingWindow_DayOfWeek_DayOfWeek_MAX = SchedulingWindow_DayOfWeek_SAT;
const int SchedulingWindow_DayOfWeek_DayOfWeek_ARRAYSIZE = SchedulingWindow_DayOfWeek_DayOfWeek_MAX + 1;

const ::google::protobuf::EnumDescriptor* SchedulingWindow_DayOfWeek_descriptor();
inline const ::std::string& SchedulingWindow_DayOfWeek_Name(SchedulingWindow_DayOfWeek value) {
  return ::google::protobuf::internal::NameOfEnum(
    SchedulingWindow_DayOfWeek_descriptor(), value);
}
inline bool SchedulingWindow_DayOfWeek_Parse(
    const ::std::string& name, SchedulingWindow_DayOfWeek* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SchedulingWindow_DayOfWeek>(
    SchedulingWindow_DayOfWeek_descriptor(), name, value);
}
enum MachineType {
  MILL3D = 0,
  LATHE = 1,
  MachineType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MachineType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MachineType_IsValid(int value);
const MachineType MachineType_MIN = MILL3D;
const MachineType MachineType_MAX = LATHE;
const int MachineType_ARRAYSIZE = MachineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineType_descriptor();
inline const ::std::string& MachineType_Name(MachineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineType_descriptor(), value);
}
inline bool MachineType_Parse(
    const ::std::string& name, MachineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineType>(
    MachineType_descriptor(), name, value);
}
// ===================================================================

class SchedulerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:specops.proto.SchedulerMessage) */ {
 public:
  SchedulerMessage();
  virtual ~SchedulerMessage();

  SchedulerMessage(const SchedulerMessage& from);

  inline SchedulerMessage& operator=(const SchedulerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SchedulerMessage& default_instance();

  static inline const SchedulerMessage* internal_default_instance() {
    return reinterpret_cast<const SchedulerMessage*>(
               &_SchedulerMessage_default_instance_);
  }

  void Swap(SchedulerMessage* other);

  // implements Message ----------------------------------------------

  inline SchedulerMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SchedulerMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SchedulerMessage& from);
  void MergeFrom(const SchedulerMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SchedulerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .specops.proto.Job jobs = 1;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 1;
  const ::specops::proto::Job& jobs(int index) const;
  ::specops::proto::Job* mutable_jobs(int index);
  ::specops::proto::Job* add_jobs();
  ::google::protobuf::RepeatedPtrField< ::specops::proto::Job >*
      mutable_jobs();
  const ::google::protobuf::RepeatedPtrField< ::specops::proto::Job >&
      jobs() const;

  // repeated .specops.proto.Machine machines = 2;
  int machines_size() const;
  void clear_machines();
  static const int kMachinesFieldNumber = 2;
  const ::specops::proto::Machine& machines(int index) const;
  ::specops::proto::Machine* mutable_machines(int index);
  ::specops::proto::Machine* add_machines();
  ::google::protobuf::RepeatedPtrField< ::specops::proto::Machine >*
      mutable_machines();
  const ::google::protobuf::RepeatedPtrField< ::specops::proto::Machine >&
      machines() const;

  // repeated .specops.proto.Tool tools = 3;
  int tools_size() const;
  void clear_tools();
  static const int kToolsFieldNumber = 3;
  const ::specops::proto::Tool& tools(int index) const;
  ::specops::proto::Tool* mutable_tools(int index);
  ::specops::proto::Tool* add_tools();
  ::google::protobuf::RepeatedPtrField< ::specops::proto::Tool >*
      mutable_tools();
  const ::google::protobuf::RepeatedPtrField< ::specops::proto::Tool >&
      tools() const;

  // repeated .specops.proto.TravelTime travel_times = 4;
  int travel_times_size() const;
  void clear_travel_times();
  static const int kTravelTimesFieldNumber = 4;
  const ::specops::proto::TravelTime& travel_times(int index) const;
  ::specops::proto::TravelTime* mutable_travel_times(int index);
  ::specops::proto::TravelTime* add_travel_times();
  ::google::protobuf::RepeatedPtrField< ::specops::proto::TravelTime >*
      mutable_travel_times();
  const ::google::protobuf::RepeatedPtrField< ::specops::proto::TravelTime >&
      travel_times() const;

  // repeated .specops.proto.SchedulingWindow scheduling_window = 7;
  int scheduling_window_size() const;
  void clear_scheduling_window();
  static const int kSchedulingWindowFieldNumber = 7;
  const ::specops::proto::SchedulingWindow& scheduling_window(int index) const;
  ::specops::proto::SchedulingWindow* mutable_scheduling_window(int index);
  ::specops::proto::SchedulingWindow* add_scheduling_window();
  ::google::protobuf::RepeatedPtrField< ::specops::proto::SchedulingWindow >*
      mutable_scheduling_window();
  const ::google::protobuf::RepeatedPtrField< ::specops::proto::SchedulingWindow >&
      scheduling_window() const;

  // int64 current_timestamp = 5;
  void clear_current_timestamp();
  static const int kCurrentTimestampFieldNumber = 5;
  ::google::protobuf::int64 current_timestamp() const;
  void set_current_timestamp(::google::protobuf::int64 value);

  // int64 execution_delay = 6;
  void clear_execution_delay();
  static const int kExecutionDelayFieldNumber = 6;
  ::google::protobuf::int64 execution_delay() const;
  void set_execution_delay(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:specops.proto.SchedulerMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::specops::proto::Job > jobs_;
  ::google::protobuf::RepeatedPtrField< ::specops::proto::Machine > machines_;
  ::google::protobuf::RepeatedPtrField< ::specops::proto::Tool > tools_;
  ::google::protobuf::RepeatedPtrField< ::specops::proto::TravelTime > travel_times_;
  ::google::protobuf::RepeatedPtrField< ::specops::proto::SchedulingWindow > scheduling_window_;
  ::google::protobuf::int64 current_timestamp_;
  ::google::protobuf::int64 execution_delay_;
  mutable int _cached_size_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Job : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:specops.proto.Job) */ {
 public:
  Job();
  virtual ~Job();

  Job(const Job& from);

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Job& default_instance();

  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }

  void Swap(Job* other);

  // implements Message ----------------------------------------------

  inline Job* New() const PROTOBUF_FINAL { return New(NULL); }

  Job* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Job* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .specops.proto.ProcessStep process_steps = 3;
  int process_steps_size() const;
  void clear_process_steps();
  static const int kProcessStepsFieldNumber = 3;
  const ::specops::proto::ProcessStep& process_steps(int index) const;
  ::specops::proto::ProcessStep* mutable_process_steps(int index);
  ::specops::proto::ProcessStep* add_process_steps();
  ::google::protobuf::RepeatedPtrField< ::specops::proto::ProcessStep >*
      mutable_process_steps();
  const ::google::protobuf::RepeatedPtrField< ::specops::proto::ProcessStep >&
      process_steps() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string part_id = 2;
  void clear_part_id();
  static const int kPartIdFieldNumber = 2;
  const ::std::string& part_id() const;
  void set_part_id(const ::std::string& value);
  #if LANG_CXX11
  void set_part_id(::std::string&& value);
  #endif
  void set_part_id(const char* value);
  void set_part_id(const char* value, size_t size);
  ::std::string* mutable_part_id();
  ::std::string* release_part_id();
  void set_allocated_part_id(::std::string* part_id);

  // int64 deadline = 4;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 4;
  ::google::protobuf::int64 deadline() const;
  void set_deadline(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:specops.proto.Job)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::specops::proto::ProcessStep > process_steps_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr part_id_;
  ::google::protobuf::int64 deadline_;
  mutable int _cached_size_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessStep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:specops.proto.ProcessStep) */ {
 public:
  ProcessStep();
  virtual ~ProcessStep();

  ProcessStep(const ProcessStep& from);

  inline ProcessStep& operator=(const ProcessStep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessStep& default_instance();

  static inline const ProcessStep* internal_default_instance() {
    return reinterpret_cast<const ProcessStep*>(
               &_ProcessStep_default_instance_);
  }

  void Swap(ProcessStep* other);

  // implements Message ----------------------------------------------

  inline ProcessStep* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessStep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProcessStep& from);
  void MergeFrom(const ProcessStep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProcessStep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProcessStep_Status Status;
  static const Status NOT_STARTED =
    ProcessStep_Status_NOT_STARTED;
  static const Status STARTED =
    ProcessStep_Status_STARTED;
  static const Status FINISHED =
    ProcessStep_Status_FINISHED;
  static inline bool Status_IsValid(int value) {
    return ProcessStep_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ProcessStep_Status_Status_MIN;
  static const Status Status_MAX =
    ProcessStep_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ProcessStep_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ProcessStep_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ProcessStep_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ProcessStep_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string tool_types = 1;
  int tool_types_size() const;
  void clear_tool_types();
  static const int kToolTypesFieldNumber = 1;
  const ::std::string& tool_types(int index) const;
  ::std::string* mutable_tool_types(int index);
  void set_tool_types(int index, const ::std::string& value);
  void set_tool_types(int index, const char* value);
  void set_tool_types(int index, const char* value, size_t size);
  ::std::string* add_tool_types();
  void add_tool_types(const ::std::string& value);
  void add_tool_types(const char* value);
  void add_tool_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tool_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tool_types();

  // string machine_id = 7;
  void clear_machine_id();
  static const int kMachineIdFieldNumber = 7;
  const ::std::string& machine_id() const;
  void set_machine_id(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_id(::std::string&& value);
  #endif
  void set_machine_id(const char* value);
  void set_machine_id(const char* value, size_t size);
  ::std::string* mutable_machine_id();
  ::std::string* release_machine_id();
  void set_allocated_machine_id(::std::string* machine_id);

  // int32 required_rpm = 2;
  void clear_required_rpm();
  static const int kRequiredRpmFieldNumber = 2;
  ::google::protobuf::int32 required_rpm() const;
  void set_required_rpm(::google::protobuf::int32 value);

  // .specops.proto.MachineType machine_type = 3;
  void clear_machine_type();
  static const int kMachineTypeFieldNumber = 3;
  ::specops::proto::MachineType machine_type() const;
  void set_machine_type(::specops::proto::MachineType value);

  // int64 setup_duration = 4;
  void clear_setup_duration();
  static const int kSetupDurationFieldNumber = 4;
  ::google::protobuf::int64 setup_duration() const;
  void set_setup_duration(::google::protobuf::int64 value);

  // int64 cycle_duration = 5;
  void clear_cycle_duration();
  static const int kCycleDurationFieldNumber = 5;
  ::google::protobuf::int64 cycle_duration() const;
  void set_cycle_duration(::google::protobuf::int64 value);

  // int64 start_time = 8;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 8;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // bool allocated = 6;
  void clear_allocated();
  static const int kAllocatedFieldNumber = 6;
  bool allocated() const;
  void set_allocated(bool value);

  // .specops.proto.ProcessStep.Status status = 10;
  void clear_status();
  static const int kStatusFieldNumber = 10;
  ::specops::proto::ProcessStep_Status status() const;
  void set_status(::specops::proto::ProcessStep_Status value);

  // int64 end_time = 9;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 9;
  ::google::protobuf::int64 end_time() const;
  void set_end_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:specops.proto.ProcessStep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tool_types_;
  ::google::protobuf::internal::ArenaStringPtr machine_id_;
  ::google::protobuf::int32 required_rpm_;
  int machine_type_;
  ::google::protobuf::int64 setup_duration_;
  ::google::protobuf::int64 cycle_duration_;
  ::google::protobuf::int64 start_time_;
  bool allocated_;
  int status_;
  ::google::protobuf::int64 end_time_;
  mutable int _cached_size_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Machine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:specops.proto.Machine) */ {
 public:
  Machine();
  virtual ~Machine();

  Machine(const Machine& from);

  inline Machine& operator=(const Machine& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Machine& default_instance();

  static inline const Machine* internal_default_instance() {
    return reinterpret_cast<const Machine*>(
               &_Machine_default_instance_);
  }

  void Swap(Machine* other);

  // implements Message ----------------------------------------------

  inline Machine* New() const PROTOBUF_FINAL { return New(NULL); }

  Machine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Machine& from);
  void MergeFrom(const Machine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Machine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Machine_Status Status;
  static const Status ONLINE =
    Machine_Status_ONLINE;
  static const Status OFFLINE =
    Machine_Status_OFFLINE;
  static inline bool Status_IsValid(int value) {
    return Machine_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Machine_Status_Status_MIN;
  static const Status Status_MAX =
    Machine_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Machine_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Machine_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Machine_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Machine_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .specops.proto.MaintenanceSchedule maintenance_schedules = 6;
  int maintenance_schedules_size() const;
  void clear_maintenance_schedules();
  static const int kMaintenanceSchedulesFieldNumber = 6;
  const ::specops::proto::MaintenanceSchedule& maintenance_schedules(int index) const;
  ::specops::proto::MaintenanceSchedule* mutable_maintenance_schedules(int index);
  ::specops::proto::MaintenanceSchedule* add_maintenance_schedules();
  ::google::protobuf::RepeatedPtrField< ::specops::proto::MaintenanceSchedule >*
      mutable_maintenance_schedules();
  const ::google::protobuf::RepeatedPtrField< ::specops::proto::MaintenanceSchedule >&
      maintenance_schedules() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // int32 current_max_rpm = 2;
  void clear_current_max_rpm();
  static const int kCurrentMaxRpmFieldNumber = 2;
  ::google::protobuf::int32 current_max_rpm() const;
  void set_current_max_rpm(::google::protobuf::int32 value);

  // .specops.proto.MachineType machine_type = 3;
  void clear_machine_type();
  static const int kMachineTypeFieldNumber = 3;
  ::specops::proto::MachineType machine_type() const;
  void set_machine_type(::specops::proto::MachineType value);

  // int64 remaining_life = 4;
  void clear_remaining_life();
  static const int kRemainingLifeFieldNumber = 4;
  ::google::protobuf::int64 remaining_life() const;
  void set_remaining_life(::google::protobuf::int64 value);

  // .specops.proto.Machine.Status status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::specops::proto::Machine_Status status() const;
  void set_status(::specops::proto::Machine_Status value);

  // @@protoc_insertion_point(class_scope:specops.proto.Machine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::specops::proto::MaintenanceSchedule > maintenance_schedules_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 current_max_rpm_;
  int machine_type_;
  ::google::protobuf::int64 remaining_life_;
  int status_;
  mutable int _cached_size_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:specops.proto.Tool) */ {
 public:
  Tool();
  virtual ~Tool();

  Tool(const Tool& from);

  inline Tool& operator=(const Tool& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tool& default_instance();

  static inline const Tool* internal_default_instance() {
    return reinterpret_cast<const Tool*>(
               &_Tool_default_instance_);
  }

  void Swap(Tool* other);

  // implements Message ----------------------------------------------

  inline Tool* New() const PROTOBUF_FINAL { return New(NULL); }

  Tool* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tool& from);
  void MergeFrom(const Tool& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // int32 quantity = 2;
  void clear_quantity();
  static const int kQuantityFieldNumber = 2;
  ::google::protobuf::int32 quantity() const;
  void set_quantity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:specops.proto.Tool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int32 quantity_;
  mutable int _cached_size_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TravelTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:specops.proto.TravelTime) */ {
 public:
  TravelTime();
  virtual ~TravelTime();

  TravelTime(const TravelTime& from);

  inline TravelTime& operator=(const TravelTime& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TravelTime& default_instance();

  static inline const TravelTime* internal_default_instance() {
    return reinterpret_cast<const TravelTime*>(
               &_TravelTime_default_instance_);
  }

  void Swap(TravelTime* other);

  // implements Message ----------------------------------------------

  inline TravelTime* New() const PROTOBUF_FINAL { return New(NULL); }

  TravelTime* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TravelTime& from);
  void MergeFrom(const TravelTime& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TravelTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_machine = 1;
  void clear_from_machine();
  static const int kFromMachineFieldNumber = 1;
  const ::std::string& from_machine() const;
  void set_from_machine(const ::std::string& value);
  #if LANG_CXX11
  void set_from_machine(::std::string&& value);
  #endif
  void set_from_machine(const char* value);
  void set_from_machine(const char* value, size_t size);
  ::std::string* mutable_from_machine();
  ::std::string* release_from_machine();
  void set_allocated_from_machine(::std::string* from_machine);

  // string to_machine = 2;
  void clear_to_machine();
  static const int kToMachineFieldNumber = 2;
  const ::std::string& to_machine() const;
  void set_to_machine(const ::std::string& value);
  #if LANG_CXX11
  void set_to_machine(::std::string&& value);
  #endif
  void set_to_machine(const char* value);
  void set_to_machine(const char* value, size_t size);
  ::std::string* mutable_to_machine();
  ::std::string* release_to_machine();
  void set_allocated_to_machine(::std::string* to_machine);

  // int64 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:specops.proto.TravelTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_machine_;
  ::google::protobuf::internal::ArenaStringPtr to_machine_;
  ::google::protobuf::int64 duration_;
  mutable int _cached_size_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaintenanceSchedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:specops.proto.MaintenanceSchedule) */ {
 public:
  MaintenanceSchedule();
  virtual ~MaintenanceSchedule();

  MaintenanceSchedule(const MaintenanceSchedule& from);

  inline MaintenanceSchedule& operator=(const MaintenanceSchedule& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaintenanceSchedule& default_instance();

  static inline const MaintenanceSchedule* internal_default_instance() {
    return reinterpret_cast<const MaintenanceSchedule*>(
               &_MaintenanceSchedule_default_instance_);
  }

  void Swap(MaintenanceSchedule* other);

  // implements Message ----------------------------------------------

  inline MaintenanceSchedule* New() const PROTOBUF_FINAL { return New(NULL); }

  MaintenanceSchedule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MaintenanceSchedule& from);
  void MergeFrom(const MaintenanceSchedule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MaintenanceSchedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:specops.proto.MaintenanceSchedule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 duration_;
  mutable int _cached_size_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SchedulingWindow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:specops.proto.SchedulingWindow) */ {
 public:
  SchedulingWindow();
  virtual ~SchedulingWindow();

  SchedulingWindow(const SchedulingWindow& from);

  inline SchedulingWindow& operator=(const SchedulingWindow& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SchedulingWindow& default_instance();

  static inline const SchedulingWindow* internal_default_instance() {
    return reinterpret_cast<const SchedulingWindow*>(
               &_SchedulingWindow_default_instance_);
  }

  void Swap(SchedulingWindow* other);

  // implements Message ----------------------------------------------

  inline SchedulingWindow* New() const PROTOBUF_FINAL { return New(NULL); }

  SchedulingWindow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SchedulingWindow& from);
  void MergeFrom(const SchedulingWindow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SchedulingWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SchedulingWindow_DayOfWeek DayOfWeek;
  static const DayOfWeek SUN =
    SchedulingWindow_DayOfWeek_SUN;
  static const DayOfWeek MON =
    SchedulingWindow_DayOfWeek_MON;
  static const DayOfWeek TUE =
    SchedulingWindow_DayOfWeek_TUE;
  static const DayOfWeek WED =
    SchedulingWindow_DayOfWeek_WED;
  static const DayOfWeek THU =
    SchedulingWindow_DayOfWeek_THU;
  static const DayOfWeek FRI =
    SchedulingWindow_DayOfWeek_FRI;
  static const DayOfWeek SAT =
    SchedulingWindow_DayOfWeek_SAT;
  static inline bool DayOfWeek_IsValid(int value) {
    return SchedulingWindow_DayOfWeek_IsValid(value);
  }
  static const DayOfWeek DayOfWeek_MIN =
    SchedulingWindow_DayOfWeek_DayOfWeek_MIN;
  static const DayOfWeek DayOfWeek_MAX =
    SchedulingWindow_DayOfWeek_DayOfWeek_MAX;
  static const int DayOfWeek_ARRAYSIZE =
    SchedulingWindow_DayOfWeek_DayOfWeek_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DayOfWeek_descriptor() {
    return SchedulingWindow_DayOfWeek_descriptor();
  }
  static inline const ::std::string& DayOfWeek_Name(DayOfWeek value) {
    return SchedulingWindow_DayOfWeek_Name(value);
  }
  static inline bool DayOfWeek_Parse(const ::std::string& name,
      DayOfWeek* value) {
    return SchedulingWindow_DayOfWeek_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // .specops.proto.SchedulingWindow.DayOfWeek day_of_week = 3;
  void clear_day_of_week();
  static const int kDayOfWeekFieldNumber = 3;
  ::specops::proto::SchedulingWindow_DayOfWeek day_of_week() const;
  void set_day_of_week(::specops::proto::SchedulingWindow_DayOfWeek value);

  // @@protoc_insertion_point(class_scope:specops.proto.SchedulingWindow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  int day_of_week_;
  mutable int _cached_size_;
  friend struct  protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SchedulerMessage

// repeated .specops.proto.Job jobs = 1;
inline int SchedulerMessage::jobs_size() const {
  return jobs_.size();
}
inline void SchedulerMessage::clear_jobs() {
  jobs_.Clear();
}
inline const ::specops::proto::Job& SchedulerMessage::jobs(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.jobs)
  return jobs_.Get(index);
}
inline ::specops::proto::Job* SchedulerMessage::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.jobs)
  return jobs_.Mutable(index);
}
inline ::specops::proto::Job* SchedulerMessage::add_jobs() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.jobs)
  return jobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::specops::proto::Job >*
SchedulerMessage::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.jobs)
  return &jobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::specops::proto::Job >&
SchedulerMessage::jobs() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.jobs)
  return jobs_;
}

// repeated .specops.proto.Machine machines = 2;
inline int SchedulerMessage::machines_size() const {
  return machines_.size();
}
inline void SchedulerMessage::clear_machines() {
  machines_.Clear();
}
inline const ::specops::proto::Machine& SchedulerMessage::machines(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.machines)
  return machines_.Get(index);
}
inline ::specops::proto::Machine* SchedulerMessage::mutable_machines(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.machines)
  return machines_.Mutable(index);
}
inline ::specops::proto::Machine* SchedulerMessage::add_machines() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.machines)
  return machines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::specops::proto::Machine >*
SchedulerMessage::mutable_machines() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.machines)
  return &machines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::specops::proto::Machine >&
SchedulerMessage::machines() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.machines)
  return machines_;
}

// repeated .specops.proto.Tool tools = 3;
inline int SchedulerMessage::tools_size() const {
  return tools_.size();
}
inline void SchedulerMessage::clear_tools() {
  tools_.Clear();
}
inline const ::specops::proto::Tool& SchedulerMessage::tools(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.tools)
  return tools_.Get(index);
}
inline ::specops::proto::Tool* SchedulerMessage::mutable_tools(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.tools)
  return tools_.Mutable(index);
}
inline ::specops::proto::Tool* SchedulerMessage::add_tools() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.tools)
  return tools_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::specops::proto::Tool >*
SchedulerMessage::mutable_tools() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.tools)
  return &tools_;
}
inline const ::google::protobuf::RepeatedPtrField< ::specops::proto::Tool >&
SchedulerMessage::tools() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.tools)
  return tools_;
}

// repeated .specops.proto.TravelTime travel_times = 4;
inline int SchedulerMessage::travel_times_size() const {
  return travel_times_.size();
}
inline void SchedulerMessage::clear_travel_times() {
  travel_times_.Clear();
}
inline const ::specops::proto::TravelTime& SchedulerMessage::travel_times(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.travel_times)
  return travel_times_.Get(index);
}
inline ::specops::proto::TravelTime* SchedulerMessage::mutable_travel_times(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.travel_times)
  return travel_times_.Mutable(index);
}
inline ::specops::proto::TravelTime* SchedulerMessage::add_travel_times() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.travel_times)
  return travel_times_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::specops::proto::TravelTime >*
SchedulerMessage::mutable_travel_times() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.travel_times)
  return &travel_times_;
}
inline const ::google::protobuf::RepeatedPtrField< ::specops::proto::TravelTime >&
SchedulerMessage::travel_times() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.travel_times)
  return travel_times_;
}

// int64 current_timestamp = 5;
inline void SchedulerMessage::clear_current_timestamp() {
  current_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SchedulerMessage::current_timestamp() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.current_timestamp)
  return current_timestamp_;
}
inline void SchedulerMessage::set_current_timestamp(::google::protobuf::int64 value) {
  
  current_timestamp_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulerMessage.current_timestamp)
}

// int64 execution_delay = 6;
inline void SchedulerMessage::clear_execution_delay() {
  execution_delay_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SchedulerMessage::execution_delay() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.execution_delay)
  return execution_delay_;
}
inline void SchedulerMessage::set_execution_delay(::google::protobuf::int64 value) {
  
  execution_delay_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulerMessage.execution_delay)
}

// repeated .specops.proto.SchedulingWindow scheduling_window = 7;
inline int SchedulerMessage::scheduling_window_size() const {
  return scheduling_window_.size();
}
inline void SchedulerMessage::clear_scheduling_window() {
  scheduling_window_.Clear();
}
inline const ::specops::proto::SchedulingWindow& SchedulerMessage::scheduling_window(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.scheduling_window)
  return scheduling_window_.Get(index);
}
inline ::specops::proto::SchedulingWindow* SchedulerMessage::mutable_scheduling_window(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.scheduling_window)
  return scheduling_window_.Mutable(index);
}
inline ::specops::proto::SchedulingWindow* SchedulerMessage::add_scheduling_window() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.scheduling_window)
  return scheduling_window_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::specops::proto::SchedulingWindow >*
SchedulerMessage::mutable_scheduling_window() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.scheduling_window)
  return &scheduling_window_;
}
inline const ::google::protobuf::RepeatedPtrField< ::specops::proto::SchedulingWindow >&
SchedulerMessage::scheduling_window() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.scheduling_window)
  return scheduling_window_;
}

// -------------------------------------------------------------------

// Job

// string id = 1;
inline void Job::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::id() const {
  // @@protoc_insertion_point(field_get:specops.proto.Job.id)
  return id_.GetNoArena();
}
inline void Job::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.Job.id)
}
#if LANG_CXX11
inline void Job::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.Job.id)
}
#endif
inline void Job::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.Job.id)
}
inline void Job::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.Job.id)
}
inline ::std::string* Job::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.Job.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_id() {
  // @@protoc_insertion_point(field_release:specops.proto.Job.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.Job.id)
}

// string part_id = 2;
inline void Job::clear_part_id() {
  part_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Job::part_id() const {
  // @@protoc_insertion_point(field_get:specops.proto.Job.part_id)
  return part_id_.GetNoArena();
}
inline void Job::set_part_id(const ::std::string& value) {
  
  part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.Job.part_id)
}
#if LANG_CXX11
inline void Job::set_part_id(::std::string&& value) {
  
  part_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.Job.part_id)
}
#endif
inline void Job::set_part_id(const char* value) {
  
  part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.Job.part_id)
}
inline void Job::set_part_id(const char* value, size_t size) {
  
  part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.Job.part_id)
}
inline ::std::string* Job::mutable_part_id() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.Job.part_id)
  return part_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Job::release_part_id() {
  // @@protoc_insertion_point(field_release:specops.proto.Job.part_id)
  
  return part_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_part_id(::std::string* part_id) {
  if (part_id != NULL) {
    
  } else {
    
  }
  part_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_id);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.Job.part_id)
}

// repeated .specops.proto.ProcessStep process_steps = 3;
inline int Job::process_steps_size() const {
  return process_steps_.size();
}
inline void Job::clear_process_steps() {
  process_steps_.Clear();
}
inline const ::specops::proto::ProcessStep& Job::process_steps(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.Job.process_steps)
  return process_steps_.Get(index);
}
inline ::specops::proto::ProcessStep* Job::mutable_process_steps(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.Job.process_steps)
  return process_steps_.Mutable(index);
}
inline ::specops::proto::ProcessStep* Job::add_process_steps() {
  // @@protoc_insertion_point(field_add:specops.proto.Job.process_steps)
  return process_steps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::specops::proto::ProcessStep >*
Job::mutable_process_steps() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.Job.process_steps)
  return &process_steps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::specops::proto::ProcessStep >&
Job::process_steps() const {
  // @@protoc_insertion_point(field_list:specops.proto.Job.process_steps)
  return process_steps_;
}

// int64 deadline = 4;
inline void Job::clear_deadline() {
  deadline_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Job::deadline() const {
  // @@protoc_insertion_point(field_get:specops.proto.Job.deadline)
  return deadline_;
}
inline void Job::set_deadline(::google::protobuf::int64 value) {
  
  deadline_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Job.deadline)
}

// -------------------------------------------------------------------

// ProcessStep

// repeated string tool_types = 1;
inline int ProcessStep::tool_types_size() const {
  return tool_types_.size();
}
inline void ProcessStep::clear_tool_types() {
  tool_types_.Clear();
}
inline const ::std::string& ProcessStep::tool_types(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.tool_types)
  return tool_types_.Get(index);
}
inline ::std::string* ProcessStep::mutable_tool_types(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.ProcessStep.tool_types)
  return tool_types_.Mutable(index);
}
inline void ProcessStep::set_tool_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.tool_types)
  tool_types_.Mutable(index)->assign(value);
}
inline void ProcessStep::set_tool_types(int index, const char* value) {
  tool_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:specops.proto.ProcessStep.tool_types)
}
inline void ProcessStep::set_tool_types(int index, const char* value, size_t size) {
  tool_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:specops.proto.ProcessStep.tool_types)
}
inline ::std::string* ProcessStep::add_tool_types() {
  // @@protoc_insertion_point(field_add_mutable:specops.proto.ProcessStep.tool_types)
  return tool_types_.Add();
}
inline void ProcessStep::add_tool_types(const ::std::string& value) {
  tool_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:specops.proto.ProcessStep.tool_types)
}
inline void ProcessStep::add_tool_types(const char* value) {
  tool_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:specops.proto.ProcessStep.tool_types)
}
inline void ProcessStep::add_tool_types(const char* value, size_t size) {
  tool_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:specops.proto.ProcessStep.tool_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessStep::tool_types() const {
  // @@protoc_insertion_point(field_list:specops.proto.ProcessStep.tool_types)
  return tool_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessStep::mutable_tool_types() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.ProcessStep.tool_types)
  return &tool_types_;
}

// int32 required_rpm = 2;
inline void ProcessStep::clear_required_rpm() {
  required_rpm_ = 0;
}
inline ::google::protobuf::int32 ProcessStep::required_rpm() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.required_rpm)
  return required_rpm_;
}
inline void ProcessStep::set_required_rpm(::google::protobuf::int32 value) {
  
  required_rpm_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.required_rpm)
}

// .specops.proto.MachineType machine_type = 3;
inline void ProcessStep::clear_machine_type() {
  machine_type_ = 0;
}
inline ::specops::proto::MachineType ProcessStep::machine_type() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.machine_type)
  return static_cast< ::specops::proto::MachineType >(machine_type_);
}
inline void ProcessStep::set_machine_type(::specops::proto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.machine_type)
}

// int64 setup_duration = 4;
inline void ProcessStep::clear_setup_duration() {
  setup_duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProcessStep::setup_duration() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.setup_duration)
  return setup_duration_;
}
inline void ProcessStep::set_setup_duration(::google::protobuf::int64 value) {
  
  setup_duration_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.setup_duration)
}

// int64 cycle_duration = 5;
inline void ProcessStep::clear_cycle_duration() {
  cycle_duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProcessStep::cycle_duration() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.cycle_duration)
  return cycle_duration_;
}
inline void ProcessStep::set_cycle_duration(::google::protobuf::int64 value) {
  
  cycle_duration_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.cycle_duration)
}

// bool allocated = 6;
inline void ProcessStep::clear_allocated() {
  allocated_ = false;
}
inline bool ProcessStep::allocated() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.allocated)
  return allocated_;
}
inline void ProcessStep::set_allocated(bool value) {
  
  allocated_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.allocated)
}

// string machine_id = 7;
inline void ProcessStep::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessStep::machine_id() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.machine_id)
  return machine_id_.GetNoArena();
}
inline void ProcessStep::set_machine_id(const ::std::string& value) {
  
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.machine_id)
}
#if LANG_CXX11
inline void ProcessStep::set_machine_id(::std::string&& value) {
  
  machine_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.ProcessStep.machine_id)
}
#endif
inline void ProcessStep::set_machine_id(const char* value) {
  
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.ProcessStep.machine_id)
}
inline void ProcessStep::set_machine_id(const char* value, size_t size) {
  
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.ProcessStep.machine_id)
}
inline ::std::string* ProcessStep::mutable_machine_id() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.ProcessStep.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessStep::release_machine_id() {
  // @@protoc_insertion_point(field_release:specops.proto.ProcessStep.machine_id)
  
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessStep::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    
  } else {
    
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.ProcessStep.machine_id)
}

// int64 start_time = 8;
inline void ProcessStep::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProcessStep::start_time() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.start_time)
  return start_time_;
}
inline void ProcessStep::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.start_time)
}

// int64 end_time = 9;
inline void ProcessStep::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProcessStep::end_time() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.end_time)
  return end_time_;
}
inline void ProcessStep::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.end_time)
}

// .specops.proto.ProcessStep.Status status = 10;
inline void ProcessStep::clear_status() {
  status_ = 0;
}
inline ::specops::proto::ProcessStep_Status ProcessStep::status() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.status)
  return static_cast< ::specops::proto::ProcessStep_Status >(status_);
}
inline void ProcessStep::set_status(::specops::proto::ProcessStep_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.status)
}

// -------------------------------------------------------------------

// Machine

// string id = 1;
inline void Machine::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Machine::id() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.id)
  return id_.GetNoArena();
}
inline void Machine::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.Machine.id)
}
#if LANG_CXX11
inline void Machine::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.Machine.id)
}
#endif
inline void Machine::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.Machine.id)
}
inline void Machine::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.Machine.id)
}
inline ::std::string* Machine::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.Machine.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Machine::release_id() {
  // @@protoc_insertion_point(field_release:specops.proto.Machine.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Machine::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.Machine.id)
}

// int32 current_max_rpm = 2;
inline void Machine::clear_current_max_rpm() {
  current_max_rpm_ = 0;
}
inline ::google::protobuf::int32 Machine::current_max_rpm() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.current_max_rpm)
  return current_max_rpm_;
}
inline void Machine::set_current_max_rpm(::google::protobuf::int32 value) {
  
  current_max_rpm_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Machine.current_max_rpm)
}

// .specops.proto.MachineType machine_type = 3;
inline void Machine::clear_machine_type() {
  machine_type_ = 0;
}
inline ::specops::proto::MachineType Machine::machine_type() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.machine_type)
  return static_cast< ::specops::proto::MachineType >(machine_type_);
}
inline void Machine::set_machine_type(::specops::proto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Machine.machine_type)
}

// int64 remaining_life = 4;
inline void Machine::clear_remaining_life() {
  remaining_life_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Machine::remaining_life() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.remaining_life)
  return remaining_life_;
}
inline void Machine::set_remaining_life(::google::protobuf::int64 value) {
  
  remaining_life_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Machine.remaining_life)
}

// .specops.proto.Machine.Status status = 5;
inline void Machine::clear_status() {
  status_ = 0;
}
inline ::specops::proto::Machine_Status Machine::status() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.status)
  return static_cast< ::specops::proto::Machine_Status >(status_);
}
inline void Machine::set_status(::specops::proto::Machine_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Machine.status)
}

// repeated .specops.proto.MaintenanceSchedule maintenance_schedules = 6;
inline int Machine::maintenance_schedules_size() const {
  return maintenance_schedules_.size();
}
inline void Machine::clear_maintenance_schedules() {
  maintenance_schedules_.Clear();
}
inline const ::specops::proto::MaintenanceSchedule& Machine::maintenance_schedules(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.maintenance_schedules)
  return maintenance_schedules_.Get(index);
}
inline ::specops::proto::MaintenanceSchedule* Machine::mutable_maintenance_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.Machine.maintenance_schedules)
  return maintenance_schedules_.Mutable(index);
}
inline ::specops::proto::MaintenanceSchedule* Machine::add_maintenance_schedules() {
  // @@protoc_insertion_point(field_add:specops.proto.Machine.maintenance_schedules)
  return maintenance_schedules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::specops::proto::MaintenanceSchedule >*
Machine::mutable_maintenance_schedules() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.Machine.maintenance_schedules)
  return &maintenance_schedules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::specops::proto::MaintenanceSchedule >&
Machine::maintenance_schedules() const {
  // @@protoc_insertion_point(field_list:specops.proto.Machine.maintenance_schedules)
  return maintenance_schedules_;
}

// -------------------------------------------------------------------

// Tool

// string type = 1;
inline void Tool::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tool::type() const {
  // @@protoc_insertion_point(field_get:specops.proto.Tool.type)
  return type_.GetNoArena();
}
inline void Tool::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.Tool.type)
}
#if LANG_CXX11
inline void Tool::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.Tool.type)
}
#endif
inline void Tool::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.Tool.type)
}
inline void Tool::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.Tool.type)
}
inline ::std::string* Tool::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.Tool.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tool::release_type() {
  // @@protoc_insertion_point(field_release:specops.proto.Tool.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tool::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.Tool.type)
}

// int32 quantity = 2;
inline void Tool::clear_quantity() {
  quantity_ = 0;
}
inline ::google::protobuf::int32 Tool::quantity() const {
  // @@protoc_insertion_point(field_get:specops.proto.Tool.quantity)
  return quantity_;
}
inline void Tool::set_quantity(::google::protobuf::int32 value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Tool.quantity)
}

// -------------------------------------------------------------------

// TravelTime

// string from_machine = 1;
inline void TravelTime::clear_from_machine() {
  from_machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TravelTime::from_machine() const {
  // @@protoc_insertion_point(field_get:specops.proto.TravelTime.from_machine)
  return from_machine_.GetNoArena();
}
inline void TravelTime::set_from_machine(const ::std::string& value) {
  
  from_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.TravelTime.from_machine)
}
#if LANG_CXX11
inline void TravelTime::set_from_machine(::std::string&& value) {
  
  from_machine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.TravelTime.from_machine)
}
#endif
inline void TravelTime::set_from_machine(const char* value) {
  
  from_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.TravelTime.from_machine)
}
inline void TravelTime::set_from_machine(const char* value, size_t size) {
  
  from_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.TravelTime.from_machine)
}
inline ::std::string* TravelTime::mutable_from_machine() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.TravelTime.from_machine)
  return from_machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TravelTime::release_from_machine() {
  // @@protoc_insertion_point(field_release:specops.proto.TravelTime.from_machine)
  
  return from_machine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TravelTime::set_allocated_from_machine(::std::string* from_machine) {
  if (from_machine != NULL) {
    
  } else {
    
  }
  from_machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_machine);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.TravelTime.from_machine)
}

// string to_machine = 2;
inline void TravelTime::clear_to_machine() {
  to_machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TravelTime::to_machine() const {
  // @@protoc_insertion_point(field_get:specops.proto.TravelTime.to_machine)
  return to_machine_.GetNoArena();
}
inline void TravelTime::set_to_machine(const ::std::string& value) {
  
  to_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.TravelTime.to_machine)
}
#if LANG_CXX11
inline void TravelTime::set_to_machine(::std::string&& value) {
  
  to_machine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.TravelTime.to_machine)
}
#endif
inline void TravelTime::set_to_machine(const char* value) {
  
  to_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.TravelTime.to_machine)
}
inline void TravelTime::set_to_machine(const char* value, size_t size) {
  
  to_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.TravelTime.to_machine)
}
inline ::std::string* TravelTime::mutable_to_machine() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.TravelTime.to_machine)
  return to_machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TravelTime::release_to_machine() {
  // @@protoc_insertion_point(field_release:specops.proto.TravelTime.to_machine)
  
  return to_machine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TravelTime::set_allocated_to_machine(::std::string* to_machine) {
  if (to_machine != NULL) {
    
  } else {
    
  }
  to_machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_machine);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.TravelTime.to_machine)
}

// int64 duration = 3;
inline void TravelTime::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TravelTime::duration() const {
  // @@protoc_insertion_point(field_get:specops.proto.TravelTime.duration)
  return duration_;
}
inline void TravelTime::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.TravelTime.duration)
}

// -------------------------------------------------------------------

// MaintenanceSchedule

// int64 start = 1;
inline void MaintenanceSchedule::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MaintenanceSchedule::start() const {
  // @@protoc_insertion_point(field_get:specops.proto.MaintenanceSchedule.start)
  return start_;
}
inline void MaintenanceSchedule::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.MaintenanceSchedule.start)
}

// int64 duration = 2;
inline void MaintenanceSchedule::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MaintenanceSchedule::duration() const {
  // @@protoc_insertion_point(field_get:specops.proto.MaintenanceSchedule.duration)
  return duration_;
}
inline void MaintenanceSchedule::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.MaintenanceSchedule.duration)
}

// -------------------------------------------------------------------

// SchedulingWindow

// int64 start = 1;
inline void SchedulingWindow::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SchedulingWindow::start() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulingWindow.start)
  return start_;
}
inline void SchedulingWindow::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulingWindow.start)
}

// int64 end = 2;
inline void SchedulingWindow::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SchedulingWindow::end() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulingWindow.end)
  return end_;
}
inline void SchedulingWindow::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulingWindow.end)
}

// .specops.proto.SchedulingWindow.DayOfWeek day_of_week = 3;
inline void SchedulingWindow::clear_day_of_week() {
  day_of_week_ = 0;
}
inline ::specops::proto::SchedulingWindow_DayOfWeek SchedulingWindow::day_of_week() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulingWindow.day_of_week)
  return static_cast< ::specops::proto::SchedulingWindow_DayOfWeek >(day_of_week_);
}
inline void SchedulingWindow::set_day_of_week(::specops::proto::SchedulingWindow_DayOfWeek value) {
  
  day_of_week_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulingWindow.day_of_week)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace specops

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::specops::proto::ProcessStep_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::specops::proto::ProcessStep_Status>() {
  return ::specops::proto::ProcessStep_Status_descriptor();
}
template <> struct is_proto_enum< ::specops::proto::Machine_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::specops::proto::Machine_Status>() {
  return ::specops::proto::Machine_Status_descriptor();
}
template <> struct is_proto_enum< ::specops::proto::SchedulingWindow_DayOfWeek> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::specops::proto::SchedulingWindow_DayOfWeek>() {
  return ::specops::proto::SchedulingWindow_DayOfWeek_descriptor();
}
template <> struct is_proto_enum< ::specops::proto::MachineType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::specops::proto::MachineType>() {
  return ::specops::proto::MachineType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
