// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace specops {
namespace proto {
class SchedulerMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SchedulerMessage> {
} _SchedulerMessage_default_instance_;
class JobDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Job> {
} _Job_default_instance_;
class ProcessStepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessStep> {
} _ProcessStep_default_instance_;
class MachineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Machine> {
} _Machine_default_instance_;
class ToolDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Tool> {
} _Tool_default_instance_;
class TravelTimeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TravelTime> {
} _TravelTime_default_instance_;
class MaintenanceScheduleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MaintenanceSchedule> {
} _MaintenanceSchedule_default_instance_;
class SchedulingWindowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SchedulingWindow> {
} _SchedulingWindow_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerMessage, jobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerMessage, machines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerMessage, tools_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerMessage, travel_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerMessage, current_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerMessage, execution_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulerMessage, scheduling_window_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, part_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, process_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, deadline_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, tool_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, required_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, setup_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, cycle_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, allocated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, machine_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessStep, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, current_max_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, remaining_life_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Machine, maintenance_schedules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tool, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tool, quantity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelTime, from_machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelTime, to_machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelTime, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintenanceSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintenanceSchedule, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintenanceSchedule, duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulingWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulingWindow, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulingWindow, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchedulingWindow, day_of_week_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SchedulerMessage)},
  { 11, -1, sizeof(Job)},
  { 19, -1, sizeof(ProcessStep)},
  { 33, -1, sizeof(Machine)},
  { 43, -1, sizeof(Tool)},
  { 49, -1, sizeof(TravelTime)},
  { 56, -1, sizeof(MaintenanceSchedule)},
  { 62, -1, sizeof(SchedulingWindow)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SchedulerMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Job_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Machine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Tool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TravelTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaintenanceSchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SchedulingWindow_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _SchedulerMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Job_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ProcessStep_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Machine_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Tool_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TravelTime_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _MaintenanceSchedule_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SchedulingWindow_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SchedulerMessage_default_instance_.DefaultConstruct();
  _Job_default_instance_.DefaultConstruct();
  _ProcessStep_default_instance_.DefaultConstruct();
  _Machine_default_instance_.DefaultConstruct();
  _Tool_default_instance_.DefaultConstruct();
  _TravelTime_default_instance_.DefaultConstruct();
  _MaintenanceSchedule_default_instance_.DefaultConstruct();
  _SchedulingWindow_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\022\rspecops.proto\"\243\002\n\020Sched"
      "ulerMessage\022 \n\004jobs\030\001 \003(\0132\022.specops.prot"
      "o.Job\022(\n\010machines\030\002 \003(\0132\026.specops.proto."
      "Machine\022\"\n\005tools\030\003 \003(\0132\023.specops.proto.T"
      "ool\022/\n\014travel_times\030\004 \003(\0132\031.specops.prot"
      "o.TravelTime\022\031\n\021current_timestamp\030\005 \001(\003\022"
      "\027\n\017execution_delay\030\006 \001(\003\022:\n\021scheduling_w"
      "indow\030\007 \003(\0132\037.specops.proto.SchedulingWi"
      "ndow\"g\n\003Job\022\n\n\002id\030\001 \001(\t\022\017\n\007part_id\030\002 \001(\t"
      "\0221\n\rprocess_steps\030\003 \003(\0132\032.specops.proto."
      "ProcessStep\022\020\n\010deadline\030\004 \001(\003\"\317\002\n\013Proces"
      "sStep\022\022\n\ntool_types\030\001 \003(\t\022\024\n\014required_rp"
      "m\030\002 \001(\005\0220\n\014machine_type\030\003 \001(\0162\032.specops."
      "proto.MachineType\022\026\n\016setup_duration\030\004 \001("
      "\003\022\026\n\016cycle_duration\030\005 \001(\003\022\021\n\tallocated\030\006"
      " \001(\010\022\022\n\nmachine_id\030\007 \001(\t\022\022\n\nstart_time\030\010"
      " \001(\003\022\020\n\010end_time\030\t \001(\003\0221\n\006status\030\n \001(\0162!"
      ".specops.proto.ProcessStep.Status\"4\n\006Sta"
      "tus\022\017\n\013NOT_STARTED\020\000\022\013\n\007STARTED\020\001\022\014\n\010FIN"
      "ISHED\020\002\"\215\002\n\007Machine\022\n\n\002id\030\001 \001(\t\022\027\n\017curre"
      "nt_max_rpm\030\002 \001(\005\0220\n\014machine_type\030\003 \001(\0162\032"
      ".specops.proto.MachineType\022\026\n\016remaining_"
      "life\030\004 \001(\003\022-\n\006status\030\005 \001(\0162\035.specops.pro"
      "to.Machine.Status\022A\n\025maintenance_schedul"
      "es\030\006 \003(\0132\".specops.proto.MaintenanceSche"
      "dule\"!\n\006Status\022\n\n\006ONLINE\020\000\022\013\n\007OFFLINE\020\001\""
      "&\n\004Tool\022\014\n\004type\030\001 \001(\t\022\020\n\010quantity\030\002 \001(\005\""
      "H\n\nTravelTime\022\024\n\014from_machine\030\001 \001(\t\022\022\n\nt"
      "o_machine\030\002 \001(\t\022\020\n\010duration\030\003 \001(\003\"6\n\023Mai"
      "ntenanceSchedule\022\r\n\005start\030\001 \001(\003\022\020\n\010durat"
      "ion\030\002 \001(\003\"\272\001\n\020SchedulingWindow\022\r\n\005start\030"
      "\001 \001(\003\022\013\n\003end\030\002 \001(\003\022>\n\013day_of_week\030\003 \001(\0162"
      ").specops.proto.SchedulingWindow.DayOfWe"
      "ek\"J\n\tDayOfWeek\022\007\n\003SUN\020\000\022\007\n\003MON\020\001\022\007\n\003TUE"
      "\020\002\022\007\n\003WED\020\003\022\007\n\003THU\020\004\022\007\n\003FRI\020\005\022\007\n\003SAT\020\006*$"
      "\n\013MachineType\022\n\n\006MILL3D\020\000\022\t\n\005LATHE\020\001b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* ProcessStep_Status_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool ProcessStep_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProcessStep_Status ProcessStep::NOT_STARTED;
const ProcessStep_Status ProcessStep::STARTED;
const ProcessStep_Status ProcessStep::FINISHED;
const ProcessStep_Status ProcessStep::Status_MIN;
const ProcessStep_Status ProcessStep::Status_MAX;
const int ProcessStep::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Machine_Status_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool Machine_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Machine_Status Machine::ONLINE;
const Machine_Status Machine::OFFLINE;
const Machine_Status Machine::Status_MIN;
const Machine_Status Machine::Status_MAX;
const int Machine::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SchedulingWindow_DayOfWeek_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[2];
}
bool SchedulingWindow_DayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SchedulingWindow_DayOfWeek SchedulingWindow::SUN;
const SchedulingWindow_DayOfWeek SchedulingWindow::MON;
const SchedulingWindow_DayOfWeek SchedulingWindow::TUE;
const SchedulingWindow_DayOfWeek SchedulingWindow::WED;
const SchedulingWindow_DayOfWeek SchedulingWindow::THU;
const SchedulingWindow_DayOfWeek SchedulingWindow::FRI;
const SchedulingWindow_DayOfWeek SchedulingWindow::SAT;
const SchedulingWindow_DayOfWeek SchedulingWindow::DayOfWeek_MIN;
const SchedulingWindow_DayOfWeek SchedulingWindow::DayOfWeek_MAX;
const int SchedulingWindow::DayOfWeek_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MachineType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[3];
}
bool MachineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchedulerMessage::kJobsFieldNumber;
const int SchedulerMessage::kMachinesFieldNumber;
const int SchedulerMessage::kToolsFieldNumber;
const int SchedulerMessage::kTravelTimesFieldNumber;
const int SchedulerMessage::kCurrentTimestampFieldNumber;
const int SchedulerMessage::kExecutionDelayFieldNumber;
const int SchedulerMessage::kSchedulingWindowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchedulerMessage::SchedulerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:specops.proto.SchedulerMessage)
}
SchedulerMessage::SchedulerMessage(const SchedulerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      jobs_(from.jobs_),
      machines_(from.machines_),
      tools_(from.tools_),
      travel_times_(from.travel_times_),
      scheduling_window_(from.scheduling_window_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_timestamp_, &from.current_timestamp_,
    reinterpret_cast<char*>(&execution_delay_) -
    reinterpret_cast<char*>(&current_timestamp_) + sizeof(execution_delay_));
  // @@protoc_insertion_point(copy_constructor:specops.proto.SchedulerMessage)
}

void SchedulerMessage::SharedCtor() {
  ::memset(&current_timestamp_, 0, reinterpret_cast<char*>(&execution_delay_) -
    reinterpret_cast<char*>(&current_timestamp_) + sizeof(execution_delay_));
  _cached_size_ = 0;
}

SchedulerMessage::~SchedulerMessage() {
  // @@protoc_insertion_point(destructor:specops.proto.SchedulerMessage)
  SharedDtor();
}

void SchedulerMessage::SharedDtor() {
}

void SchedulerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchedulerMessage::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0].descriptor;
}

const SchedulerMessage& SchedulerMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

SchedulerMessage* SchedulerMessage::New(::google::protobuf::Arena* arena) const {
  SchedulerMessage* n = new SchedulerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchedulerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:specops.proto.SchedulerMessage)
  jobs_.Clear();
  machines_.Clear();
  tools_.Clear();
  travel_times_.Clear();
  scheduling_window_.Clear();
  ::memset(&current_timestamp_, 0, reinterpret_cast<char*>(&execution_delay_) -
    reinterpret_cast<char*>(&current_timestamp_) + sizeof(execution_delay_));
}

bool SchedulerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:specops.proto.SchedulerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .specops.proto.Job jobs = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .specops.proto.Machine machines = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_machines()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .specops.proto.Tool tools = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tools()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .specops.proto.TravelTime travel_times = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_travel_times()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int64 current_timestamp = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 execution_delay = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &execution_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .specops.proto.SchedulingWindow scheduling_window = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_scheduling_window()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:specops.proto.SchedulerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:specops.proto.SchedulerMessage)
  return false;
#undef DO_
}

void SchedulerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:specops.proto.SchedulerMessage)
  // repeated .specops.proto.Job jobs = 1;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jobs(i), output);
  }

  // repeated .specops.proto.Machine machines = 2;
  for (unsigned int i = 0, n = this->machines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->machines(i), output);
  }

  // repeated .specops.proto.Tool tools = 3;
  for (unsigned int i = 0, n = this->tools_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tools(i), output);
  }

  // repeated .specops.proto.TravelTime travel_times = 4;
  for (unsigned int i = 0, n = this->travel_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->travel_times(i), output);
  }

  // int64 current_timestamp = 5;
  if (this->current_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->current_timestamp(), output);
  }

  // int64 execution_delay = 6;
  if (this->execution_delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->execution_delay(), output);
  }

  // repeated .specops.proto.SchedulingWindow scheduling_window = 7;
  for (unsigned int i = 0, n = this->scheduling_window_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->scheduling_window(i), output);
  }

  // @@protoc_insertion_point(serialize_end:specops.proto.SchedulerMessage)
}

::google::protobuf::uint8* SchedulerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:specops.proto.SchedulerMessage)
  // repeated .specops.proto.Job jobs = 1;
  for (unsigned int i = 0, n = this->jobs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->jobs(i), false, target);
  }

  // repeated .specops.proto.Machine machines = 2;
  for (unsigned int i = 0, n = this->machines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->machines(i), false, target);
  }

  // repeated .specops.proto.Tool tools = 3;
  for (unsigned int i = 0, n = this->tools_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tools(i), false, target);
  }

  // repeated .specops.proto.TravelTime travel_times = 4;
  for (unsigned int i = 0, n = this->travel_times_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->travel_times(i), false, target);
  }

  // int64 current_timestamp = 5;
  if (this->current_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->current_timestamp(), target);
  }

  // int64 execution_delay = 6;
  if (this->execution_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->execution_delay(), target);
  }

  // repeated .specops.proto.SchedulingWindow scheduling_window = 7;
  for (unsigned int i = 0, n = this->scheduling_window_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->scheduling_window(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:specops.proto.SchedulerMessage)
  return target;
}

size_t SchedulerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:specops.proto.SchedulerMessage)
  size_t total_size = 0;

  // repeated .specops.proto.Job jobs = 1;
  {
    unsigned int count = this->jobs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jobs(i));
    }
  }

  // repeated .specops.proto.Machine machines = 2;
  {
    unsigned int count = this->machines_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machines(i));
    }
  }

  // repeated .specops.proto.Tool tools = 3;
  {
    unsigned int count = this->tools_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tools(i));
    }
  }

  // repeated .specops.proto.TravelTime travel_times = 4;
  {
    unsigned int count = this->travel_times_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->travel_times(i));
    }
  }

  // repeated .specops.proto.SchedulingWindow scheduling_window = 7;
  {
    unsigned int count = this->scheduling_window_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scheduling_window(i));
    }
  }

  // int64 current_timestamp = 5;
  if (this->current_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_timestamp());
  }

  // int64 execution_delay = 6;
  if (this->execution_delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->execution_delay());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchedulerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:specops.proto.SchedulerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SchedulerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SchedulerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:specops.proto.SchedulerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:specops.proto.SchedulerMessage)
    MergeFrom(*source);
  }
}

void SchedulerMessage::MergeFrom(const SchedulerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:specops.proto.SchedulerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jobs_.MergeFrom(from.jobs_);
  machines_.MergeFrom(from.machines_);
  tools_.MergeFrom(from.tools_);
  travel_times_.MergeFrom(from.travel_times_);
  scheduling_window_.MergeFrom(from.scheduling_window_);
  if (from.current_timestamp() != 0) {
    set_current_timestamp(from.current_timestamp());
  }
  if (from.execution_delay() != 0) {
    set_execution_delay(from.execution_delay());
  }
}

void SchedulerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:specops.proto.SchedulerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchedulerMessage::CopyFrom(const SchedulerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:specops.proto.SchedulerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulerMessage::IsInitialized() const {
  return true;
}

void SchedulerMessage::Swap(SchedulerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchedulerMessage::InternalSwap(SchedulerMessage* other) {
  jobs_.UnsafeArenaSwap(&other->jobs_);
  machines_.UnsafeArenaSwap(&other->machines_);
  tools_.UnsafeArenaSwap(&other->tools_);
  travel_times_.UnsafeArenaSwap(&other->travel_times_);
  scheduling_window_.UnsafeArenaSwap(&other->scheduling_window_);
  std::swap(current_timestamp_, other->current_timestamp_);
  std::swap(execution_delay_, other->execution_delay_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchedulerMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchedulerMessage

// repeated .specops.proto.Job jobs = 1;
int SchedulerMessage::jobs_size() const {
  return jobs_.size();
}
void SchedulerMessage::clear_jobs() {
  jobs_.Clear();
}
const ::specops::proto::Job& SchedulerMessage::jobs(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.jobs)
  return jobs_.Get(index);
}
::specops::proto::Job* SchedulerMessage::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.jobs)
  return jobs_.Mutable(index);
}
::specops::proto::Job* SchedulerMessage::add_jobs() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.jobs)
  return jobs_.Add();
}
::google::protobuf::RepeatedPtrField< ::specops::proto::Job >*
SchedulerMessage::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.jobs)
  return &jobs_;
}
const ::google::protobuf::RepeatedPtrField< ::specops::proto::Job >&
SchedulerMessage::jobs() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.jobs)
  return jobs_;
}

// repeated .specops.proto.Machine machines = 2;
int SchedulerMessage::machines_size() const {
  return machines_.size();
}
void SchedulerMessage::clear_machines() {
  machines_.Clear();
}
const ::specops::proto::Machine& SchedulerMessage::machines(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.machines)
  return machines_.Get(index);
}
::specops::proto::Machine* SchedulerMessage::mutable_machines(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.machines)
  return machines_.Mutable(index);
}
::specops::proto::Machine* SchedulerMessage::add_machines() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.machines)
  return machines_.Add();
}
::google::protobuf::RepeatedPtrField< ::specops::proto::Machine >*
SchedulerMessage::mutable_machines() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.machines)
  return &machines_;
}
const ::google::protobuf::RepeatedPtrField< ::specops::proto::Machine >&
SchedulerMessage::machines() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.machines)
  return machines_;
}

// repeated .specops.proto.Tool tools = 3;
int SchedulerMessage::tools_size() const {
  return tools_.size();
}
void SchedulerMessage::clear_tools() {
  tools_.Clear();
}
const ::specops::proto::Tool& SchedulerMessage::tools(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.tools)
  return tools_.Get(index);
}
::specops::proto::Tool* SchedulerMessage::mutable_tools(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.tools)
  return tools_.Mutable(index);
}
::specops::proto::Tool* SchedulerMessage::add_tools() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.tools)
  return tools_.Add();
}
::google::protobuf::RepeatedPtrField< ::specops::proto::Tool >*
SchedulerMessage::mutable_tools() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.tools)
  return &tools_;
}
const ::google::protobuf::RepeatedPtrField< ::specops::proto::Tool >&
SchedulerMessage::tools() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.tools)
  return tools_;
}

// repeated .specops.proto.TravelTime travel_times = 4;
int SchedulerMessage::travel_times_size() const {
  return travel_times_.size();
}
void SchedulerMessage::clear_travel_times() {
  travel_times_.Clear();
}
const ::specops::proto::TravelTime& SchedulerMessage::travel_times(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.travel_times)
  return travel_times_.Get(index);
}
::specops::proto::TravelTime* SchedulerMessage::mutable_travel_times(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.travel_times)
  return travel_times_.Mutable(index);
}
::specops::proto::TravelTime* SchedulerMessage::add_travel_times() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.travel_times)
  return travel_times_.Add();
}
::google::protobuf::RepeatedPtrField< ::specops::proto::TravelTime >*
SchedulerMessage::mutable_travel_times() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.travel_times)
  return &travel_times_;
}
const ::google::protobuf::RepeatedPtrField< ::specops::proto::TravelTime >&
SchedulerMessage::travel_times() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.travel_times)
  return travel_times_;
}

// int64 current_timestamp = 5;
void SchedulerMessage::clear_current_timestamp() {
  current_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SchedulerMessage::current_timestamp() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.current_timestamp)
  return current_timestamp_;
}
void SchedulerMessage::set_current_timestamp(::google::protobuf::int64 value) {
  
  current_timestamp_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulerMessage.current_timestamp)
}

// int64 execution_delay = 6;
void SchedulerMessage::clear_execution_delay() {
  execution_delay_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SchedulerMessage::execution_delay() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.execution_delay)
  return execution_delay_;
}
void SchedulerMessage::set_execution_delay(::google::protobuf::int64 value) {
  
  execution_delay_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulerMessage.execution_delay)
}

// repeated .specops.proto.SchedulingWindow scheduling_window = 7;
int SchedulerMessage::scheduling_window_size() const {
  return scheduling_window_.size();
}
void SchedulerMessage::clear_scheduling_window() {
  scheduling_window_.Clear();
}
const ::specops::proto::SchedulingWindow& SchedulerMessage::scheduling_window(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulerMessage.scheduling_window)
  return scheduling_window_.Get(index);
}
::specops::proto::SchedulingWindow* SchedulerMessage::mutable_scheduling_window(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.SchedulerMessage.scheduling_window)
  return scheduling_window_.Mutable(index);
}
::specops::proto::SchedulingWindow* SchedulerMessage::add_scheduling_window() {
  // @@protoc_insertion_point(field_add:specops.proto.SchedulerMessage.scheduling_window)
  return scheduling_window_.Add();
}
::google::protobuf::RepeatedPtrField< ::specops::proto::SchedulingWindow >*
SchedulerMessage::mutable_scheduling_window() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.SchedulerMessage.scheduling_window)
  return &scheduling_window_;
}
const ::google::protobuf::RepeatedPtrField< ::specops::proto::SchedulingWindow >&
SchedulerMessage::scheduling_window() const {
  // @@protoc_insertion_point(field_list:specops.proto.SchedulerMessage.scheduling_window)
  return scheduling_window_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Job::kIdFieldNumber;
const int Job::kPartIdFieldNumber;
const int Job::kProcessStepsFieldNumber;
const int Job::kDeadlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Job::Job()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:specops.proto.Job)
}
Job::Job(const Job& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      process_steps_(from.process_steps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  part_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_id().size() > 0) {
    part_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_id_);
  }
  deadline_ = from.deadline_;
  // @@protoc_insertion_point(copy_constructor:specops.proto.Job)
}

void Job::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deadline_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:specops.proto.Job)
  SharedDtor();
}

void Job::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Job::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[1].descriptor;
}

const Job& Job::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Job* Job::New(::google::protobuf::Arena* arena) const {
  Job* n = new Job;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:specops.proto.Job)
  process_steps_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deadline_ = GOOGLE_LONGLONG(0);
}

bool Job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:specops.proto.Job)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "specops.proto.Job.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_id().data(), this->part_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "specops.proto.Job.part_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .specops.proto.ProcessStep process_steps = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_process_steps()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int64 deadline = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:specops.proto.Job)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:specops.proto.Job)
  return false;
#undef DO_
}

void Job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:specops.proto.Job)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.Job.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string part_id = 2;
  if (this->part_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_id().data(), this->part_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.Job.part_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->part_id(), output);
  }

  // repeated .specops.proto.ProcessStep process_steps = 3;
  for (unsigned int i = 0, n = this->process_steps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->process_steps(i), output);
  }

  // int64 deadline = 4;
  if (this->deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->deadline(), output);
  }

  // @@protoc_insertion_point(serialize_end:specops.proto.Job)
}

::google::protobuf::uint8* Job::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:specops.proto.Job)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.Job.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string part_id = 2;
  if (this->part_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_id().data(), this->part_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.Job.part_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->part_id(), target);
  }

  // repeated .specops.proto.ProcessStep process_steps = 3;
  for (unsigned int i = 0, n = this->process_steps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->process_steps(i), false, target);
  }

  // int64 deadline = 4;
  if (this->deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->deadline(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:specops.proto.Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:specops.proto.Job)
  size_t total_size = 0;

  // repeated .specops.proto.ProcessStep process_steps = 3;
  {
    unsigned int count = this->process_steps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process_steps(i));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string part_id = 2;
  if (this->part_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_id());
  }

  // int64 deadline = 4;
  if (this->deadline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->deadline());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Job::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:specops.proto.Job)
  GOOGLE_DCHECK_NE(&from, this);
  const Job* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Job>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:specops.proto.Job)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:specops.proto.Job)
    MergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:specops.proto.Job)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_steps_.MergeFrom(from.process_steps_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.part_id().size() > 0) {

    part_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_id_);
  }
  if (from.deadline() != 0) {
    set_deadline(from.deadline());
  }
}

void Job::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:specops.proto.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:specops.proto.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  return true;
}

void Job::Swap(Job* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Job::InternalSwap(Job* other) {
  process_steps_.UnsafeArenaSwap(&other->process_steps_);
  id_.Swap(&other->id_);
  part_id_.Swap(&other->part_id_);
  std::swap(deadline_, other->deadline_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Job::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Job

// string id = 1;
void Job::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Job::id() const {
  // @@protoc_insertion_point(field_get:specops.proto.Job.id)
  return id_.GetNoArena();
}
void Job::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.Job.id)
}
#if LANG_CXX11
void Job::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.Job.id)
}
#endif
void Job::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.Job.id)
}
void Job::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.Job.id)
}
::std::string* Job::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.Job.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Job::release_id() {
  // @@protoc_insertion_point(field_release:specops.proto.Job.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Job::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.Job.id)
}

// string part_id = 2;
void Job::clear_part_id() {
  part_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Job::part_id() const {
  // @@protoc_insertion_point(field_get:specops.proto.Job.part_id)
  return part_id_.GetNoArena();
}
void Job::set_part_id(const ::std::string& value) {
  
  part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.Job.part_id)
}
#if LANG_CXX11
void Job::set_part_id(::std::string&& value) {
  
  part_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.Job.part_id)
}
#endif
void Job::set_part_id(const char* value) {
  
  part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.Job.part_id)
}
void Job::set_part_id(const char* value, size_t size) {
  
  part_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.Job.part_id)
}
::std::string* Job::mutable_part_id() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.Job.part_id)
  return part_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Job::release_part_id() {
  // @@protoc_insertion_point(field_release:specops.proto.Job.part_id)
  
  return part_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Job::set_allocated_part_id(::std::string* part_id) {
  if (part_id != NULL) {
    
  } else {
    
  }
  part_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_id);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.Job.part_id)
}

// repeated .specops.proto.ProcessStep process_steps = 3;
int Job::process_steps_size() const {
  return process_steps_.size();
}
void Job::clear_process_steps() {
  process_steps_.Clear();
}
const ::specops::proto::ProcessStep& Job::process_steps(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.Job.process_steps)
  return process_steps_.Get(index);
}
::specops::proto::ProcessStep* Job::mutable_process_steps(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.Job.process_steps)
  return process_steps_.Mutable(index);
}
::specops::proto::ProcessStep* Job::add_process_steps() {
  // @@protoc_insertion_point(field_add:specops.proto.Job.process_steps)
  return process_steps_.Add();
}
::google::protobuf::RepeatedPtrField< ::specops::proto::ProcessStep >*
Job::mutable_process_steps() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.Job.process_steps)
  return &process_steps_;
}
const ::google::protobuf::RepeatedPtrField< ::specops::proto::ProcessStep >&
Job::process_steps() const {
  // @@protoc_insertion_point(field_list:specops.proto.Job.process_steps)
  return process_steps_;
}

// int64 deadline = 4;
void Job::clear_deadline() {
  deadline_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Job::deadline() const {
  // @@protoc_insertion_point(field_get:specops.proto.Job.deadline)
  return deadline_;
}
void Job::set_deadline(::google::protobuf::int64 value) {
  
  deadline_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Job.deadline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessStep::kToolTypesFieldNumber;
const int ProcessStep::kRequiredRpmFieldNumber;
const int ProcessStep::kMachineTypeFieldNumber;
const int ProcessStep::kSetupDurationFieldNumber;
const int ProcessStep::kCycleDurationFieldNumber;
const int ProcessStep::kAllocatedFieldNumber;
const int ProcessStep::kMachineIdFieldNumber;
const int ProcessStep::kStartTimeFieldNumber;
const int ProcessStep::kEndTimeFieldNumber;
const int ProcessStep::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessStep::ProcessStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:specops.proto.ProcessStep)
}
ProcessStep::ProcessStep(const ProcessStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tool_types_(from.tool_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_id().size() > 0) {
    machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
  }
  ::memcpy(&required_rpm_, &from.required_rpm_,
    reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&required_rpm_) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:specops.proto.ProcessStep)
}

void ProcessStep::SharedCtor() {
  machine_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&required_rpm_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&required_rpm_) + sizeof(end_time_));
  _cached_size_ = 0;
}

ProcessStep::~ProcessStep() {
  // @@protoc_insertion_point(destructor:specops.proto.ProcessStep)
  SharedDtor();
}

void ProcessStep::SharedDtor() {
  machine_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProcessStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessStep::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[2].descriptor;
}

const ProcessStep& ProcessStep::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessStep* ProcessStep::New(::google::protobuf::Arena* arena) const {
  ProcessStep* n = new ProcessStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessStep::Clear() {
// @@protoc_insertion_point(message_clear_start:specops.proto.ProcessStep)
  tool_types_.Clear();
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&required_rpm_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&required_rpm_) + sizeof(end_time_));
}

bool ProcessStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:specops.proto.ProcessStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tool_types = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tool_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tool_types(this->tool_types_size() - 1).data(),
            this->tool_types(this->tool_types_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "specops.proto.ProcessStep.tool_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 required_rpm = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &required_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .specops.proto.MachineType machine_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::specops::proto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 setup_duration = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &setup_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cycle_duration = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cycle_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allocated = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allocated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machine_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_id().data(), this->machine_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "specops.proto.ProcessStep.machine_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 start_time = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end_time = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .specops.proto.ProcessStep.Status status = 10;
      case 10: {
        if (tag == 80u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::specops::proto::ProcessStep_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:specops.proto.ProcessStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:specops.proto.ProcessStep)
  return false;
#undef DO_
}

void ProcessStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:specops.proto.ProcessStep)
  // repeated string tool_types = 1;
  for (int i = 0; i < this->tool_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tool_types(i).data(), this->tool_types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.ProcessStep.tool_types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tool_types(i), output);
  }

  // int32 required_rpm = 2;
  if (this->required_rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->required_rpm(), output);
  }

  // .specops.proto.MachineType machine_type = 3;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->machine_type(), output);
  }

  // int64 setup_duration = 4;
  if (this->setup_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->setup_duration(), output);
  }

  // int64 cycle_duration = 5;
  if (this->cycle_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cycle_duration(), output);
  }

  // bool allocated = 6;
  if (this->allocated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allocated(), output);
  }

  // string machine_id = 7;
  if (this->machine_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.ProcessStep.machine_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->machine_id(), output);
  }

  // int64 start_time = 8;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->start_time(), output);
  }

  // int64 end_time = 9;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->end_time(), output);
  }

  // .specops.proto.ProcessStep.Status status = 10;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:specops.proto.ProcessStep)
}

::google::protobuf::uint8* ProcessStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:specops.proto.ProcessStep)
  // repeated string tool_types = 1;
  for (int i = 0; i < this->tool_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tool_types(i).data(), this->tool_types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.ProcessStep.tool_types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tool_types(i), target);
  }

  // int32 required_rpm = 2;
  if (this->required_rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->required_rpm(), target);
  }

  // .specops.proto.MachineType machine_type = 3;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->machine_type(), target);
  }

  // int64 setup_duration = 4;
  if (this->setup_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->setup_duration(), target);
  }

  // int64 cycle_duration = 5;
  if (this->cycle_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cycle_duration(), target);
  }

  // bool allocated = 6;
  if (this->allocated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allocated(), target);
  }

  // string machine_id = 7;
  if (this->machine_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_id().data(), this->machine_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.ProcessStep.machine_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->machine_id(), target);
  }

  // int64 start_time = 8;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->start_time(), target);
  }

  // int64 end_time = 9;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->end_time(), target);
  }

  // .specops.proto.ProcessStep.Status status = 10;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:specops.proto.ProcessStep)
  return target;
}

size_t ProcessStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:specops.proto.ProcessStep)
  size_t total_size = 0;

  // repeated string tool_types = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tool_types_size());
  for (int i = 0; i < this->tool_types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tool_types(i));
  }

  // string machine_id = 7;
  if (this->machine_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_id());
  }

  // int32 required_rpm = 2;
  if (this->required_rpm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->required_rpm());
  }

  // .specops.proto.MachineType machine_type = 3;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // int64 setup_duration = 4;
  if (this->setup_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->setup_duration());
  }

  // int64 cycle_duration = 5;
  if (this->cycle_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cycle_duration());
  }

  // int64 start_time = 8;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_time());
  }

  // bool allocated = 6;
  if (this->allocated() != 0) {
    total_size += 1 + 1;
  }

  // .specops.proto.ProcessStep.Status status = 10;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // int64 end_time = 9;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:specops.proto.ProcessStep)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:specops.proto.ProcessStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:specops.proto.ProcessStep)
    MergeFrom(*source);
  }
}

void ProcessStep::MergeFrom(const ProcessStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:specops.proto.ProcessStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tool_types_.MergeFrom(from.tool_types_);
  if (from.machine_id().size() > 0) {

    machine_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_id_);
  }
  if (from.required_rpm() != 0) {
    set_required_rpm(from.required_rpm());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.setup_duration() != 0) {
    set_setup_duration(from.setup_duration());
  }
  if (from.cycle_duration() != 0) {
    set_cycle_duration(from.cycle_duration());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.allocated() != 0) {
    set_allocated(from.allocated());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void ProcessStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:specops.proto.ProcessStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessStep::CopyFrom(const ProcessStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:specops.proto.ProcessStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStep::IsInitialized() const {
  return true;
}

void ProcessStep::Swap(ProcessStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessStep::InternalSwap(ProcessStep* other) {
  tool_types_.UnsafeArenaSwap(&other->tool_types_);
  machine_id_.Swap(&other->machine_id_);
  std::swap(required_rpm_, other->required_rpm_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(setup_duration_, other->setup_duration_);
  std::swap(cycle_duration_, other->cycle_duration_);
  std::swap(start_time_, other->start_time_);
  std::swap(allocated_, other->allocated_);
  std::swap(status_, other->status_);
  std::swap(end_time_, other->end_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessStep::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessStep

// repeated string tool_types = 1;
int ProcessStep::tool_types_size() const {
  return tool_types_.size();
}
void ProcessStep::clear_tool_types() {
  tool_types_.Clear();
}
const ::std::string& ProcessStep::tool_types(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.tool_types)
  return tool_types_.Get(index);
}
::std::string* ProcessStep::mutable_tool_types(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.ProcessStep.tool_types)
  return tool_types_.Mutable(index);
}
void ProcessStep::set_tool_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.tool_types)
  tool_types_.Mutable(index)->assign(value);
}
void ProcessStep::set_tool_types(int index, const char* value) {
  tool_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:specops.proto.ProcessStep.tool_types)
}
void ProcessStep::set_tool_types(int index, const char* value, size_t size) {
  tool_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:specops.proto.ProcessStep.tool_types)
}
::std::string* ProcessStep::add_tool_types() {
  // @@protoc_insertion_point(field_add_mutable:specops.proto.ProcessStep.tool_types)
  return tool_types_.Add();
}
void ProcessStep::add_tool_types(const ::std::string& value) {
  tool_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:specops.proto.ProcessStep.tool_types)
}
void ProcessStep::add_tool_types(const char* value) {
  tool_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:specops.proto.ProcessStep.tool_types)
}
void ProcessStep::add_tool_types(const char* value, size_t size) {
  tool_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:specops.proto.ProcessStep.tool_types)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessStep::tool_types() const {
  // @@protoc_insertion_point(field_list:specops.proto.ProcessStep.tool_types)
  return tool_types_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessStep::mutable_tool_types() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.ProcessStep.tool_types)
  return &tool_types_;
}

// int32 required_rpm = 2;
void ProcessStep::clear_required_rpm() {
  required_rpm_ = 0;
}
::google::protobuf::int32 ProcessStep::required_rpm() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.required_rpm)
  return required_rpm_;
}
void ProcessStep::set_required_rpm(::google::protobuf::int32 value) {
  
  required_rpm_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.required_rpm)
}

// .specops.proto.MachineType machine_type = 3;
void ProcessStep::clear_machine_type() {
  machine_type_ = 0;
}
::specops::proto::MachineType ProcessStep::machine_type() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.machine_type)
  return static_cast< ::specops::proto::MachineType >(machine_type_);
}
void ProcessStep::set_machine_type(::specops::proto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.machine_type)
}

// int64 setup_duration = 4;
void ProcessStep::clear_setup_duration() {
  setup_duration_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProcessStep::setup_duration() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.setup_duration)
  return setup_duration_;
}
void ProcessStep::set_setup_duration(::google::protobuf::int64 value) {
  
  setup_duration_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.setup_duration)
}

// int64 cycle_duration = 5;
void ProcessStep::clear_cycle_duration() {
  cycle_duration_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProcessStep::cycle_duration() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.cycle_duration)
  return cycle_duration_;
}
void ProcessStep::set_cycle_duration(::google::protobuf::int64 value) {
  
  cycle_duration_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.cycle_duration)
}

// bool allocated = 6;
void ProcessStep::clear_allocated() {
  allocated_ = false;
}
bool ProcessStep::allocated() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.allocated)
  return allocated_;
}
void ProcessStep::set_allocated(bool value) {
  
  allocated_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.allocated)
}

// string machine_id = 7;
void ProcessStep::clear_machine_id() {
  machine_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProcessStep::machine_id() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.machine_id)
  return machine_id_.GetNoArena();
}
void ProcessStep::set_machine_id(const ::std::string& value) {
  
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.machine_id)
}
#if LANG_CXX11
void ProcessStep::set_machine_id(::std::string&& value) {
  
  machine_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.ProcessStep.machine_id)
}
#endif
void ProcessStep::set_machine_id(const char* value) {
  
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.ProcessStep.machine_id)
}
void ProcessStep::set_machine_id(const char* value, size_t size) {
  
  machine_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.ProcessStep.machine_id)
}
::std::string* ProcessStep::mutable_machine_id() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.ProcessStep.machine_id)
  return machine_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProcessStep::release_machine_id() {
  // @@protoc_insertion_point(field_release:specops.proto.ProcessStep.machine_id)
  
  return machine_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProcessStep::set_allocated_machine_id(::std::string* machine_id) {
  if (machine_id != NULL) {
    
  } else {
    
  }
  machine_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_id);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.ProcessStep.machine_id)
}

// int64 start_time = 8;
void ProcessStep::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProcessStep::start_time() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.start_time)
  return start_time_;
}
void ProcessStep::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.start_time)
}

// int64 end_time = 9;
void ProcessStep::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProcessStep::end_time() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.end_time)
  return end_time_;
}
void ProcessStep::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.end_time)
}

// .specops.proto.ProcessStep.Status status = 10;
void ProcessStep::clear_status() {
  status_ = 0;
}
::specops::proto::ProcessStep_Status ProcessStep::status() const {
  // @@protoc_insertion_point(field_get:specops.proto.ProcessStep.status)
  return static_cast< ::specops::proto::ProcessStep_Status >(status_);
}
void ProcessStep::set_status(::specops::proto::ProcessStep_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.ProcessStep.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine::kIdFieldNumber;
const int Machine::kCurrentMaxRpmFieldNumber;
const int Machine::kMachineTypeFieldNumber;
const int Machine::kRemainingLifeFieldNumber;
const int Machine::kStatusFieldNumber;
const int Machine::kMaintenanceSchedulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine::Machine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:specops.proto.Machine)
}
Machine::Machine(const Machine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      maintenance_schedules_(from.maintenance_schedules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&current_max_rpm_, &from.current_max_rpm_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&current_max_rpm_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:specops.proto.Machine)
}

void Machine::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_max_rpm_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&current_max_rpm_) + sizeof(status_));
  _cached_size_ = 0;
}

Machine::~Machine() {
  // @@protoc_insertion_point(destructor:specops.proto.Machine)
  SharedDtor();
}

void Machine::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Machine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[3].descriptor;
}

const Machine& Machine::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Machine* Machine::New(::google::protobuf::Arena* arena) const {
  Machine* n = new Machine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Machine::Clear() {
// @@protoc_insertion_point(message_clear_start:specops.proto.Machine)
  maintenance_schedules_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_max_rpm_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&current_max_rpm_) + sizeof(status_));
}

bool Machine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:specops.proto.Machine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "specops.proto.Machine.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_max_rpm = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_max_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .specops.proto.MachineType machine_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_machine_type(static_cast< ::specops::proto::MachineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 remaining_life = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaining_life_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .specops.proto.Machine.Status status = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::specops::proto::Machine_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .specops.proto.MaintenanceSchedule maintenance_schedules = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_maintenance_schedules()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:specops.proto.Machine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:specops.proto.Machine)
  return false;
#undef DO_
}

void Machine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:specops.proto.Machine)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.Machine.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int32 current_max_rpm = 2;
  if (this->current_max_rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_max_rpm(), output);
  }

  // .specops.proto.MachineType machine_type = 3;
  if (this->machine_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->machine_type(), output);
  }

  // int64 remaining_life = 4;
  if (this->remaining_life() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->remaining_life(), output);
  }

  // .specops.proto.Machine.Status status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // repeated .specops.proto.MaintenanceSchedule maintenance_schedules = 6;
  for (unsigned int i = 0, n = this->maintenance_schedules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->maintenance_schedules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:specops.proto.Machine)
}

::google::protobuf::uint8* Machine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:specops.proto.Machine)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.Machine.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int32 current_max_rpm = 2;
  if (this->current_max_rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_max_rpm(), target);
  }

  // .specops.proto.MachineType machine_type = 3;
  if (this->machine_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->machine_type(), target);
  }

  // int64 remaining_life = 4;
  if (this->remaining_life() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->remaining_life(), target);
  }

  // .specops.proto.Machine.Status status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // repeated .specops.proto.MaintenanceSchedule maintenance_schedules = 6;
  for (unsigned int i = 0, n = this->maintenance_schedules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->maintenance_schedules(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:specops.proto.Machine)
  return target;
}

size_t Machine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:specops.proto.Machine)
  size_t total_size = 0;

  // repeated .specops.proto.MaintenanceSchedule maintenance_schedules = 6;
  {
    unsigned int count = this->maintenance_schedules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maintenance_schedules(i));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // int32 current_max_rpm = 2;
  if (this->current_max_rpm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_max_rpm());
  }

  // .specops.proto.MachineType machine_type = 3;
  if (this->machine_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->machine_type());
  }

  // int64 remaining_life = 4;
  if (this->remaining_life() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->remaining_life());
  }

  // .specops.proto.Machine.Status status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:specops.proto.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:specops.proto.Machine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:specops.proto.Machine)
    MergeFrom(*source);
  }
}

void Machine::MergeFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:specops.proto.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maintenance_schedules_.MergeFrom(from.maintenance_schedules_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.current_max_rpm() != 0) {
    set_current_max_rpm(from.current_max_rpm());
  }
  if (from.machine_type() != 0) {
    set_machine_type(from.machine_type());
  }
  if (from.remaining_life() != 0) {
    set_remaining_life(from.remaining_life());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Machine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:specops.proto.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine::CopyFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:specops.proto.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine::IsInitialized() const {
  return true;
}

void Machine::Swap(Machine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine::InternalSwap(Machine* other) {
  maintenance_schedules_.UnsafeArenaSwap(&other->maintenance_schedules_);
  id_.Swap(&other->id_);
  std::swap(current_max_rpm_, other->current_max_rpm_);
  std::swap(machine_type_, other->machine_type_);
  std::swap(remaining_life_, other->remaining_life_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Machine::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Machine

// string id = 1;
void Machine::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Machine::id() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.id)
  return id_.GetNoArena();
}
void Machine::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.Machine.id)
}
#if LANG_CXX11
void Machine::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.Machine.id)
}
#endif
void Machine::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.Machine.id)
}
void Machine::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.Machine.id)
}
::std::string* Machine::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.Machine.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Machine::release_id() {
  // @@protoc_insertion_point(field_release:specops.proto.Machine.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Machine::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.Machine.id)
}

// int32 current_max_rpm = 2;
void Machine::clear_current_max_rpm() {
  current_max_rpm_ = 0;
}
::google::protobuf::int32 Machine::current_max_rpm() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.current_max_rpm)
  return current_max_rpm_;
}
void Machine::set_current_max_rpm(::google::protobuf::int32 value) {
  
  current_max_rpm_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Machine.current_max_rpm)
}

// .specops.proto.MachineType machine_type = 3;
void Machine::clear_machine_type() {
  machine_type_ = 0;
}
::specops::proto::MachineType Machine::machine_type() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.machine_type)
  return static_cast< ::specops::proto::MachineType >(machine_type_);
}
void Machine::set_machine_type(::specops::proto::MachineType value) {
  
  machine_type_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Machine.machine_type)
}

// int64 remaining_life = 4;
void Machine::clear_remaining_life() {
  remaining_life_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Machine::remaining_life() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.remaining_life)
  return remaining_life_;
}
void Machine::set_remaining_life(::google::protobuf::int64 value) {
  
  remaining_life_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Machine.remaining_life)
}

// .specops.proto.Machine.Status status = 5;
void Machine::clear_status() {
  status_ = 0;
}
::specops::proto::Machine_Status Machine::status() const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.status)
  return static_cast< ::specops::proto::Machine_Status >(status_);
}
void Machine::set_status(::specops::proto::Machine_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Machine.status)
}

// repeated .specops.proto.MaintenanceSchedule maintenance_schedules = 6;
int Machine::maintenance_schedules_size() const {
  return maintenance_schedules_.size();
}
void Machine::clear_maintenance_schedules() {
  maintenance_schedules_.Clear();
}
const ::specops::proto::MaintenanceSchedule& Machine::maintenance_schedules(int index) const {
  // @@protoc_insertion_point(field_get:specops.proto.Machine.maintenance_schedules)
  return maintenance_schedules_.Get(index);
}
::specops::proto::MaintenanceSchedule* Machine::mutable_maintenance_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:specops.proto.Machine.maintenance_schedules)
  return maintenance_schedules_.Mutable(index);
}
::specops::proto::MaintenanceSchedule* Machine::add_maintenance_schedules() {
  // @@protoc_insertion_point(field_add:specops.proto.Machine.maintenance_schedules)
  return maintenance_schedules_.Add();
}
::google::protobuf::RepeatedPtrField< ::specops::proto::MaintenanceSchedule >*
Machine::mutable_maintenance_schedules() {
  // @@protoc_insertion_point(field_mutable_list:specops.proto.Machine.maintenance_schedules)
  return &maintenance_schedules_;
}
const ::google::protobuf::RepeatedPtrField< ::specops::proto::MaintenanceSchedule >&
Machine::maintenance_schedules() const {
  // @@protoc_insertion_point(field_list:specops.proto.Machine.maintenance_schedules)
  return maintenance_schedules_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tool::kTypeFieldNumber;
const int Tool::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tool::Tool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:specops.proto.Tool)
}
Tool::Tool(const Tool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:specops.proto.Tool)
}

void Tool::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
  _cached_size_ = 0;
}

Tool::~Tool() {
  // @@protoc_insertion_point(destructor:specops.proto.Tool)
  SharedDtor();
}

void Tool::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tool::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[4].descriptor;
}

const Tool& Tool::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Tool* Tool::New(::google::protobuf::Arena* arena) const {
  Tool* n = new Tool;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tool::Clear() {
// @@protoc_insertion_point(message_clear_start:specops.proto.Tool)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0;
}

bool Tool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:specops.proto.Tool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "specops.proto.Tool.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 quantity = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:specops.proto.Tool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:specops.proto.Tool)
  return false;
#undef DO_
}

void Tool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:specops.proto.Tool)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.Tool.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }

  // @@protoc_insertion_point(serialize_end:specops.proto.Tool)
}

::google::protobuf::uint8* Tool::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:specops.proto.Tool)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.Tool.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:specops.proto.Tool)
  return target;
}

size_t Tool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:specops.proto.Tool)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // int32 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quantity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:specops.proto.Tool)
  GOOGLE_DCHECK_NE(&from, this);
  const Tool* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tool>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:specops.proto.Tool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:specops.proto.Tool)
    MergeFrom(*source);
  }
}

void Tool::MergeFrom(const Tool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:specops.proto.Tool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
}

void Tool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:specops.proto.Tool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tool::CopyFrom(const Tool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:specops.proto.Tool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tool::IsInitialized() const {
  return true;
}

void Tool::Swap(Tool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tool::InternalSwap(Tool* other) {
  type_.Swap(&other->type_);
  std::swap(quantity_, other->quantity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tool::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tool

// string type = 1;
void Tool::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Tool::type() const {
  // @@protoc_insertion_point(field_get:specops.proto.Tool.type)
  return type_.GetNoArena();
}
void Tool::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.Tool.type)
}
#if LANG_CXX11
void Tool::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.Tool.type)
}
#endif
void Tool::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.Tool.type)
}
void Tool::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.Tool.type)
}
::std::string* Tool::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.Tool.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tool::release_type() {
  // @@protoc_insertion_point(field_release:specops.proto.Tool.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tool::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.Tool.type)
}

// int32 quantity = 2;
void Tool::clear_quantity() {
  quantity_ = 0;
}
::google::protobuf::int32 Tool::quantity() const {
  // @@protoc_insertion_point(field_get:specops.proto.Tool.quantity)
  return quantity_;
}
void Tool::set_quantity(::google::protobuf::int32 value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.Tool.quantity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TravelTime::kFromMachineFieldNumber;
const int TravelTime::kToMachineFieldNumber;
const int TravelTime::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TravelTime::TravelTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:specops.proto.TravelTime)
}
TravelTime::TravelTime(const TravelTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_machine().size() > 0) {
    from_machine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_machine_);
  }
  to_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_machine().size() > 0) {
    to_machine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_machine_);
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:specops.proto.TravelTime)
}

void TravelTime::SharedCtor() {
  from_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TravelTime::~TravelTime() {
  // @@protoc_insertion_point(destructor:specops.proto.TravelTime)
  SharedDtor();
}

void TravelTime::SharedDtor() {
  from_machine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_machine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TravelTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TravelTime::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[5].descriptor;
}

const TravelTime& TravelTime::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

TravelTime* TravelTime::New(::google::protobuf::Arena* arena) const {
  TravelTime* n = new TravelTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TravelTime::Clear() {
// @@protoc_insertion_point(message_clear_start:specops.proto.TravelTime)
  from_machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = GOOGLE_LONGLONG(0);
}

bool TravelTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:specops.proto.TravelTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_machine = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_machine()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_machine().data(), this->from_machine().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "specops.proto.TravelTime.from_machine"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_machine = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_machine()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_machine().data(), this->to_machine().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "specops.proto.TravelTime.to_machine"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 duration = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:specops.proto.TravelTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:specops.proto.TravelTime)
  return false;
#undef DO_
}

void TravelTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:specops.proto.TravelTime)
  // string from_machine = 1;
  if (this->from_machine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_machine().data(), this->from_machine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.TravelTime.from_machine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_machine(), output);
  }

  // string to_machine = 2;
  if (this->to_machine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_machine().data(), this->to_machine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.TravelTime.to_machine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to_machine(), output);
  }

  // int64 duration = 3;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:specops.proto.TravelTime)
}

::google::protobuf::uint8* TravelTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:specops.proto.TravelTime)
  // string from_machine = 1;
  if (this->from_machine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_machine().data(), this->from_machine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.TravelTime.from_machine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_machine(), target);
  }

  // string to_machine = 2;
  if (this->to_machine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_machine().data(), this->to_machine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "specops.proto.TravelTime.to_machine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_machine(), target);
  }

  // int64 duration = 3;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:specops.proto.TravelTime)
  return target;
}

size_t TravelTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:specops.proto.TravelTime)
  size_t total_size = 0;

  // string from_machine = 1;
  if (this->from_machine().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_machine());
  }

  // string to_machine = 2;
  if (this->to_machine().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_machine());
  }

  // int64 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TravelTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:specops.proto.TravelTime)
  GOOGLE_DCHECK_NE(&from, this);
  const TravelTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TravelTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:specops.proto.TravelTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:specops.proto.TravelTime)
    MergeFrom(*source);
  }
}

void TravelTime::MergeFrom(const TravelTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:specops.proto.TravelTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.from_machine().size() > 0) {

    from_machine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_machine_);
  }
  if (from.to_machine().size() > 0) {

    to_machine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_machine_);
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void TravelTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:specops.proto.TravelTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TravelTime::CopyFrom(const TravelTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:specops.proto.TravelTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TravelTime::IsInitialized() const {
  return true;
}

void TravelTime::Swap(TravelTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TravelTime::InternalSwap(TravelTime* other) {
  from_machine_.Swap(&other->from_machine_);
  to_machine_.Swap(&other->to_machine_);
  std::swap(duration_, other->duration_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TravelTime::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TravelTime

// string from_machine = 1;
void TravelTime::clear_from_machine() {
  from_machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TravelTime::from_machine() const {
  // @@protoc_insertion_point(field_get:specops.proto.TravelTime.from_machine)
  return from_machine_.GetNoArena();
}
void TravelTime::set_from_machine(const ::std::string& value) {
  
  from_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.TravelTime.from_machine)
}
#if LANG_CXX11
void TravelTime::set_from_machine(::std::string&& value) {
  
  from_machine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.TravelTime.from_machine)
}
#endif
void TravelTime::set_from_machine(const char* value) {
  
  from_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.TravelTime.from_machine)
}
void TravelTime::set_from_machine(const char* value, size_t size) {
  
  from_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.TravelTime.from_machine)
}
::std::string* TravelTime::mutable_from_machine() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.TravelTime.from_machine)
  return from_machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TravelTime::release_from_machine() {
  // @@protoc_insertion_point(field_release:specops.proto.TravelTime.from_machine)
  
  return from_machine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TravelTime::set_allocated_from_machine(::std::string* from_machine) {
  if (from_machine != NULL) {
    
  } else {
    
  }
  from_machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_machine);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.TravelTime.from_machine)
}

// string to_machine = 2;
void TravelTime::clear_to_machine() {
  to_machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TravelTime::to_machine() const {
  // @@protoc_insertion_point(field_get:specops.proto.TravelTime.to_machine)
  return to_machine_.GetNoArena();
}
void TravelTime::set_to_machine(const ::std::string& value) {
  
  to_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:specops.proto.TravelTime.to_machine)
}
#if LANG_CXX11
void TravelTime::set_to_machine(::std::string&& value) {
  
  to_machine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:specops.proto.TravelTime.to_machine)
}
#endif
void TravelTime::set_to_machine(const char* value) {
  
  to_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:specops.proto.TravelTime.to_machine)
}
void TravelTime::set_to_machine(const char* value, size_t size) {
  
  to_machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:specops.proto.TravelTime.to_machine)
}
::std::string* TravelTime::mutable_to_machine() {
  
  // @@protoc_insertion_point(field_mutable:specops.proto.TravelTime.to_machine)
  return to_machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TravelTime::release_to_machine() {
  // @@protoc_insertion_point(field_release:specops.proto.TravelTime.to_machine)
  
  return to_machine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TravelTime::set_allocated_to_machine(::std::string* to_machine) {
  if (to_machine != NULL) {
    
  } else {
    
  }
  to_machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_machine);
  // @@protoc_insertion_point(field_set_allocated:specops.proto.TravelTime.to_machine)
}

// int64 duration = 3;
void TravelTime::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TravelTime::duration() const {
  // @@protoc_insertion_point(field_get:specops.proto.TravelTime.duration)
  return duration_;
}
void TravelTime::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.TravelTime.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaintenanceSchedule::kStartFieldNumber;
const int MaintenanceSchedule::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaintenanceSchedule::MaintenanceSchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:specops.proto.MaintenanceSchedule)
}
MaintenanceSchedule::MaintenanceSchedule(const MaintenanceSchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&start_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:specops.proto.MaintenanceSchedule)
}

void MaintenanceSchedule::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&start_) + sizeof(duration_));
  _cached_size_ = 0;
}

MaintenanceSchedule::~MaintenanceSchedule() {
  // @@protoc_insertion_point(destructor:specops.proto.MaintenanceSchedule)
  SharedDtor();
}

void MaintenanceSchedule::SharedDtor() {
}

void MaintenanceSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaintenanceSchedule::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[6].descriptor;
}

const MaintenanceSchedule& MaintenanceSchedule::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaintenanceSchedule* MaintenanceSchedule::New(::google::protobuf::Arena* arena) const {
  MaintenanceSchedule* n = new MaintenanceSchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaintenanceSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:specops.proto.MaintenanceSchedule)
  ::memset(&start_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&start_) + sizeof(duration_));
}

bool MaintenanceSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:specops.proto.MaintenanceSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 duration = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:specops.proto.MaintenanceSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:specops.proto.MaintenanceSchedule)
  return false;
#undef DO_
}

void MaintenanceSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:specops.proto.MaintenanceSchedule)
  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->duration(), output);
  }

  // @@protoc_insertion_point(serialize_end:specops.proto.MaintenanceSchedule)
}

::google::protobuf::uint8* MaintenanceSchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:specops.proto.MaintenanceSchedule)
  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->duration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:specops.proto.MaintenanceSchedule)
  return target;
}

size_t MaintenanceSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:specops.proto.MaintenanceSchedule)
  size_t total_size = 0;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaintenanceSchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:specops.proto.MaintenanceSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const MaintenanceSchedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaintenanceSchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:specops.proto.MaintenanceSchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:specops.proto.MaintenanceSchedule)
    MergeFrom(*source);
  }
}

void MaintenanceSchedule::MergeFrom(const MaintenanceSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:specops.proto.MaintenanceSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void MaintenanceSchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:specops.proto.MaintenanceSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaintenanceSchedule::CopyFrom(const MaintenanceSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:specops.proto.MaintenanceSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaintenanceSchedule::IsInitialized() const {
  return true;
}

void MaintenanceSchedule::Swap(MaintenanceSchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaintenanceSchedule::InternalSwap(MaintenanceSchedule* other) {
  std::swap(start_, other->start_);
  std::swap(duration_, other->duration_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaintenanceSchedule::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaintenanceSchedule

// int64 start = 1;
void MaintenanceSchedule::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MaintenanceSchedule::start() const {
  // @@protoc_insertion_point(field_get:specops.proto.MaintenanceSchedule.start)
  return start_;
}
void MaintenanceSchedule::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.MaintenanceSchedule.start)
}

// int64 duration = 2;
void MaintenanceSchedule::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MaintenanceSchedule::duration() const {
  // @@protoc_insertion_point(field_get:specops.proto.MaintenanceSchedule.duration)
  return duration_;
}
void MaintenanceSchedule::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.MaintenanceSchedule.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchedulingWindow::kStartFieldNumber;
const int SchedulingWindow::kEndFieldNumber;
const int SchedulingWindow::kDayOfWeekFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchedulingWindow::SchedulingWindow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:specops.proto.SchedulingWindow)
}
SchedulingWindow::SchedulingWindow(const SchedulingWindow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&day_of_week_) -
    reinterpret_cast<char*>(&start_) + sizeof(day_of_week_));
  // @@protoc_insertion_point(copy_constructor:specops.proto.SchedulingWindow)
}

void SchedulingWindow::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&day_of_week_) -
    reinterpret_cast<char*>(&start_) + sizeof(day_of_week_));
  _cached_size_ = 0;
}

SchedulingWindow::~SchedulingWindow() {
  // @@protoc_insertion_point(destructor:specops.proto.SchedulingWindow)
  SharedDtor();
}

void SchedulingWindow::SharedDtor() {
}

void SchedulingWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchedulingWindow::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[7].descriptor;
}

const SchedulingWindow& SchedulingWindow::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

SchedulingWindow* SchedulingWindow::New(::google::protobuf::Arena* arena) const {
  SchedulingWindow* n = new SchedulingWindow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchedulingWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:specops.proto.SchedulingWindow)
  ::memset(&start_, 0, reinterpret_cast<char*>(&day_of_week_) -
    reinterpret_cast<char*>(&start_) + sizeof(day_of_week_));
}

bool SchedulingWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:specops.proto.SchedulingWindow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .specops.proto.SchedulingWindow.DayOfWeek day_of_week = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_day_of_week(static_cast< ::specops::proto::SchedulingWindow_DayOfWeek >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:specops.proto.SchedulingWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:specops.proto.SchedulingWindow)
  return false;
#undef DO_
}

void SchedulingWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:specops.proto.SchedulingWindow)
  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // .specops.proto.SchedulingWindow.DayOfWeek day_of_week = 3;
  if (this->day_of_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->day_of_week(), output);
  }

  // @@protoc_insertion_point(serialize_end:specops.proto.SchedulingWindow)
}

::google::protobuf::uint8* SchedulingWindow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:specops.proto.SchedulingWindow)
  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // .specops.proto.SchedulingWindow.DayOfWeek day_of_week = 3;
  if (this->day_of_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->day_of_week(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:specops.proto.SchedulingWindow)
  return target;
}

size_t SchedulingWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:specops.proto.SchedulingWindow)
  size_t total_size = 0;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // .specops.proto.SchedulingWindow.DayOfWeek day_of_week = 3;
  if (this->day_of_week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_of_week());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchedulingWindow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:specops.proto.SchedulingWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const SchedulingWindow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SchedulingWindow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:specops.proto.SchedulingWindow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:specops.proto.SchedulingWindow)
    MergeFrom(*source);
  }
}

void SchedulingWindow::MergeFrom(const SchedulingWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:specops.proto.SchedulingWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.day_of_week() != 0) {
    set_day_of_week(from.day_of_week());
  }
}

void SchedulingWindow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:specops.proto.SchedulingWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchedulingWindow::CopyFrom(const SchedulingWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:specops.proto.SchedulingWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulingWindow::IsInitialized() const {
  return true;
}

void SchedulingWindow::Swap(SchedulingWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchedulingWindow::InternalSwap(SchedulingWindow* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(day_of_week_, other->day_of_week_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchedulingWindow::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchedulingWindow

// int64 start = 1;
void SchedulingWindow::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SchedulingWindow::start() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulingWindow.start)
  return start_;
}
void SchedulingWindow::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulingWindow.start)
}

// int64 end = 2;
void SchedulingWindow::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SchedulingWindow::end() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulingWindow.end)
  return end_;
}
void SchedulingWindow::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulingWindow.end)
}

// .specops.proto.SchedulingWindow.DayOfWeek day_of_week = 3;
void SchedulingWindow::clear_day_of_week() {
  day_of_week_ = 0;
}
::specops::proto::SchedulingWindow_DayOfWeek SchedulingWindow::day_of_week() const {
  // @@protoc_insertion_point(field_get:specops.proto.SchedulingWindow.day_of_week)
  return static_cast< ::specops::proto::SchedulingWindow_DayOfWeek >(day_of_week_);
}
void SchedulingWindow::set_day_of_week(::specops::proto::SchedulingWindow_DayOfWeek value) {
  
  day_of_week_ = value;
  // @@protoc_insertion_point(field_set:specops.proto.SchedulingWindow.day_of_week)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace specops

// @@protoc_insertion_point(global_scope)
